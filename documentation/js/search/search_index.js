var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.112,1,2.376]],["body/controllers/AppController.html",[0,1.692,1,4.386,2,1.308,3,0.278,4,0.246,5,0.246,6,3.502,7,1.032,8,4.006,9,4.006,10,5.323,11,4.529,12,5.307,13,5.323,14,5.323,15,0.663,16,1.503,17,5.307,18,1.474,19,0.023,20,0.808,21,4.117,22,4.529,23,5.323,24,5.323,25,1.66,26,5.307,27,3.077,28,1.303,29,0.36,30,0.663,31,3.566,32,3.502,33,0.278,34,0.082,35,3.098,36,2.795,37,2.031,38,2.554,39,2.554,40,4.117,41,4.117,42,4.117,43,1.667,44,1.667,45,1.233,46,4.117,47,0.017,48,0.017]],["title/modules/AppModule.html",[49,0.988,50,2.376]],["body/modules/AppModule.html",[1,3.803,2,1.577,3,0.25,4,0.221,5,0.221,19,0.023,29,0.461,30,0.596,31,3.672,32,3.149,33,0.25,34,0.074,47,0.016,48,0.016,49,1.581,50,4.836,51,1.499,52,1.499,53,1.706,54,1.706,55,1.499,56,2.58,57,1.706,58,3.149,59,3.149,60,3.149,61,3.985,62,3.985,63,3.985,64,3.985,65,3.985,66,3.672,67,2.287,68,1.706,69,1.597,70,3.702,71,3.735,72,3.702,73,3.702,74,2.785,75,3.702,76,3.149,77,3.702,78,3.702,79,3.702,80,3.702,81,3.702,82,3.702,83,2.116]],["title/injectables/AppService.html",[31,2,84,0.877]],["body/injectables/AppService.html",[3,0.308,4,0.272,5,0.272,7,1.142,15,0.734,16,1.603,17,5.508,19,0.023,20,0.894,25,1.723,26,4.83,27,2.801,28,1.352,29,0.308,30,0.734,31,3.245,33,0.308,34,0.091,38,3.523,45,1.365,47,0.018,48,0.018,84,1.423,85,2.099,86,3.876,87,5.677,88,4.83,89,5.677,90,5.677,91,4.556,92,3.855,93,6.185,94,6.185]],["title/controllers/AuthController.html",[0,1.112,95,2.376]],["body/controllers/AuthController.html",[0,1.298,2,1.298,3,0.276,4,0.244,5,0.244,15,0.658,16,1.495,18,1.897,19,0.023,20,1.039,25,1.409,29,0.397,30,0.658,33,0.276,34,0.082,43,1.654,45,1.76,47,0.017,48,0.017,95,3.597,96,3.475,97,2.335,98,4.085,99,5.297,100,4.506,101,4.085,102,5.297,103,4.085,104,1.586,105,1.251,106,1.495,107,5.297,108,4.085,109,5.878,110,4.085,111,4.085,112,0.53,113,3.597,114,5.297,115,5.297,116,4.506,117,5.297,118,5.297,119,4.085,120,2.335,121,4.085,122,4.085,123,2.335,124,3.475,125,3.36,126,3.475,127,3.597,128,3.475,129,4.085,130,4.085,131,4.085,132,4.085,133,4.085,134,4.085,135,4.085,136,4.085]],["title/guards/AuthGuard.html",[137,2.633,138,2.376]],["body/guards/AuthGuard.html",[3,0.226,4,0.2,5,0.2,15,0.539,16,1.309,19,0.023,20,1.043,25,1.233,28,0.968,29,0.421,30,0.539,33,0.226,34,0.067,45,1.593,47,0.015,48,0.015,83,2.65,84,1.162,104,1.593,105,1.255,106,1.501,112,0.782,124,5.303,128,2.849,138,3.148,139,2.274,140,2.849,141,2.623,142,4.882,143,3.739,144,4.636,145,2,146,3.348,147,5.303,148,5.437,149,3.348,150,3.944,151,4.882,152,3.348,153,2.849,154,3.148,155,4.636,156,3.348,157,3.299,158,4.001,159,2.274,160,2.274,161,2.849,162,2.849,163,2.274,164,2.52,165,2.52,166,2.44,167,3.944,168,3.348,169,2.849,170,2.849,171,2.849,172,4.882,173,3.348,174,2.456,175,2,176,1.914,177,3.944,178,1.652,179,3.348,180,2.52,181,2.849,182,3.348,183,1.914,184,3.348,185,3.348]],["title/modules/AuthModule.html",[49,0.988,61,2.171]],["body/modules/AuthModule.html",[2,1.577,3,0.25,4,0.221,5,0.221,19,0.023,29,0.461,30,0.596,33,0.25,34,0.074,47,0.016,48,0.016,49,1.581,51,1.499,52,1.499,53,1.706,54,1.706,55,1.499,56,2.58,57,2.58,61,4.271,66,3.672,67,2.287,68,1.706,69,1.597,71,3.735,76,3.149,83,2.116,95,3.803,125,3.963,126,3.149,138,3.371,159,2.514,160,2.514,161,3.149,163,2.514,180,2.785,181,3.149,186,3.149,187,3.149,188,3.702,189,3.149,190,3.169,191,3.702,192,3.702,193,3.702,194,3.149,195,5.6,196,3.702,197,3.371,198,3.702,199,3.702,200,3.149,201,3.702,202,3.702,203,3.702,204,4.964,205,4.964]],["title/injectables/AuthService.html",[84,0.877,125,2]],["body/injectables/AuthService.html",[3,0.264,4,0.233,5,0.233,15,0.629,16,1.452,19,0.023,20,1.009,25,1.039,28,1.362,29,0.413,30,0.629,33,0.264,34,0.078,45,1.169,47,0.016,48,0.016,84,1.289,85,1.798,100,4.374,104,1.54,105,1.357,106,1.452,112,0.667,125,2.939,141,2.836,143,3.19,145,2.219,147,5.656,154,3.491,158,3.869,159,2.65,166,2.328,174,2.068,175,1.684,177,3.32,178,2.836,190,3.217,194,3.32,206,3.32,207,3.903,208,3.903,209,5.141,210,5.749,211,3.903,212,3.491,213,3.869,214,1.798,215,3.903,216,4.374,217,3.903,218,3.903,219,3.903,220,3.903,221,3.903,222,3.903,223,2.65,224,3.903,225,3.903,226,3.903]],["title/controllers/CategoriesController.html",[0,1.112,227,2.376]],["body/controllers/CategoriesController.html",[0,1.064,2,1.064,3,0.226,4,0.2,5,0.2,15,0.539,16,1.309,18,2.158,19,0.023,20,1.182,25,1.603,28,1.382,29,0.388,30,0.539,33,0.226,34,0.067,37,1.652,43,1.356,44,1.356,45,1.805,47,0.015,48,0.015,97,1.914,104,1.805,105,1.423,106,1.701,112,0.782,120,2.65,123,3.039,227,3.148,228,2.849,229,2.849,230,1.473,231,2,232,2,233,2,234,2.295,235,2.849,236,3.563,237,3.348,238,1.445,239,2.024,240,3.348,241,1.652,242,1.774,243,2,244,2,245,1.445,246,2.876,247,3.348,248,2.232,249,1.445,250,2.876,251,3.348,252,1.445,253,4.041,254,2.876,255,3.348,256,2.077,257,1.774,258,1.914,259,3.039,260,2.849,261,1.445,262,3.488,263,1.445,264,3.348,265,2.077,266,3.348,267,2.077,268,3.348,269,2.077,270,3.348,271,2.849,272,3.348,273,2.077,274,3.348]],["title/modules/CategoriesModule.html",[49,0.988,62,2.171]],["body/modules/CategoriesModule.html",[2,1.844,3,0.319,4,0.282,5,0.282,19,0.023,29,0.425,30,0.76,33,0.319,34,0.094,47,0.019,48,0.019,49,1.774,51,1.911,52,1.911,53,2.175,54,2.175,55,1.911,56,2.895,57,2.175,62,4.251,67,2.674,68,2.175,69,2.037,227,4.267,259,3.916,260,4.015,275,4.015,276,4.015,277,4.719,278,4.719]],["title/injectables/CategoriesService.html",[84,0.877,259,2]],["body/injectables/CategoriesService.html",[3,0.157,4,0.138,5,0.138,15,0.374,16,1.001,19,0.024,20,1.075,25,1.383,27,2.124,28,1.259,29,0.326,30,0.374,33,0.157,34,0.046,43,0.94,44,0.94,45,1.556,47,0.011,48,0.011,84,0.889,85,1.069,104,1.641,105,1.388,106,1.547,112,0.711,141,3.231,145,1.001,157,1.439,166,2.219,174,3.193,175,2.601,176,2.971,178,2.901,183,2.971,229,3.018,230,1.127,231,1.531,232,1.531,233,1.531,234,1.531,235,3.018,236,3.132,238,1.531,239,1.639,243,2.081,244,1.001,245,1.531,248,2.24,249,1.531,252,1.531,253,3.648,259,2.028,261,1.001,262,2.669,263,1.001,279,1.974,280,1.439,281,2.219,282,2.32,283,2.32,284,3.224,285,2.32,286,2.32,287,2.32,288,2.32,289,2.201,290,1.439,291,2.992,292,1.439,293,4.201,294,2.32,295,2.32,296,2.555,297,2.669,298,2.669,299,2.32,300,1.001,301,1.229,302,2.672,303,2.672,304,1.575,305,3.224,306,2.32,307,2.672,308,1.575,309,2.32,310,1.439,311,2.462,312,1.575,313,2.992,314,3.664,315,3.4,316,2.32,317,1.326,318,1.439,319,2.32,320,1.439,321,1.439]],["title/classes/CreateCategoryDto.html",[34,0.07,236,2]],["body/classes/CreateCategoryDto.html",[3,0.314,4,0.278,5,0.278,7,1.166,15,0.749,18,1.665,19,0.023,20,0.912,28,1.304,29,0.314,33,0.314,34,0.115,47,0.018,48,0.018,105,1.582,112,0.746,236,3.287,293,4.046,300,1.623,322,1.77,323,4.892,324,3.499,325,1.939,326,1.827,327,3.567,328,2.481,329,3.158,330,4.65,331,3.287,332,3.567,333,2.464]],["title/classes/CreateEventDto.html",[34,0.07,334,2]],["body/classes/CreateEventDto.html",[3,0.162,4,0.143,5,0.143,7,1.39,15,0.385,18,2.287,19,0.023,20,1.253,28,1.405,29,0.162,33,0.162,34,0.072,39,2.251,47,0.012,48,0.012,105,1.243,106,1.383,112,0.897,239,2.527,241,1.79,248,1.3,293,2.251,300,1.024,322,0.91,325,1.224,326,1.153,327,2.251,328,1.566,329,3.326,331,3.543,332,3.44,333,1.266,334,2.074,335,5.498,336,1.799,337,2.475,338,5.266,339,4.386,340,4.386,341,4.466,342,5.266,343,5.266,344,5.266,345,3.963,346,3.732,347,4.386,348,2.39,349,2.39,350,2.39,351,3.629,352,3.732,353,2.39,354,2.39,355,3.629,356,4.167,357,3.683,358,3.629,359,2.034,360,2.39,361,2.39,362,2.39,363,3.087,364,2.39,365,4.898,366,4.898,367,2.39,368,2.39,369,2.39,370,3.629,371,2.39,372,2.39,373,2.731,374,2.39,375,2.39,376,2.731,377,3.629,378,3.087,379,4.167,380,5.266,381,2.731]],["title/classes/CreateEventTicketTypeDto.html",[34,0.07,382,2]],["body/classes/CreateEventTicketTypeDto.html",[3,0.233,4,0.205,5,0.205,7,0.863,15,0.555,18,2.08,19,0.023,20,1.139,28,1.313,29,0.233,33,0.233,34,0.094,47,0.015,48,0.015,105,1.437,112,0.917,239,2.496,248,1.692,300,1.334,301,2.504,322,1.311,325,1.594,326,1.502,327,2.932,328,2.039,329,2.338,331,3.479,332,2.932,333,1.824,337,2.383,346,4.591,357,2.932,363,4.021,373,3.556,376,4.58,379,4.591,381,3.556,382,2.701,383,3.479,384,2.879,385,5.178,386,2.591,387,3.348,388,2.929,389,3.443,390,4.021,391,3.443,392,3.443,393,3.443]],["title/classes/CreateTicketDto.html",[34,0.07,394,2]],["body/classes/CreateTicketDto.html",[3,0.263,4,0.232,5,0.232,7,0.976,15,0.627,18,2.057,19,0.023,20,1.127,28,1.361,29,0.347,33,0.263,34,0.102,47,0.016,48,0.016,112,0.875,214,2.365,248,2.186,300,1.449,301,2.72,322,1.482,325,1.731,326,1.631,327,3.788,328,2.215,331,3.49,333,2.063,337,1.838,381,4.321,384,2.731,387,3.563,388,4.367,390,4.367,394,2.934,395,5.194,396,2.93,397,6.644,398,4.886,399,3.893,400,3.893,401,3.893,402,3.893,403,2.416,404,3.312,405,3.893]],["title/classes/CreateUserDto.html",[34,0.07,406,2]],["body/classes/CreateUserDto.html",[3,0.236,4,0.209,5,0.209,7,0.877,15,0.563,18,2.191,19,0.023,20,1.201,28,1.395,29,0.323,33,0.236,34,0.095,47,0.015,48,0.015,105,1.445,112,0.876,212,4.155,214,3.166,223,3.694,300,1.348,322,1.331,325,1.611,326,1.518,327,2.963,328,2.061,329,2.374,331,3.611,332,3.375,333,1.853,341,4.604,359,2.975,378,4.063,403,2.169,404,2.975,406,2.73,407,5.374,408,2.631,409,4.604,410,4.533,411,3.497,412,4.776,413,2.975,414,3.497,415,3.497,416,2.975,417,3.497,418,3.497,419,3.497,420,4.063,421,2.975,422,2.975,423,3.497]],["title/controllers/EventTicketTypesController.html",[0,1.112,424,2.376]],["body/controllers/EventTicketTypesController.html",[0,0.989,2,0.989,3,0.21,4,0.186,5,0.186,15,0.501,16,1.243,18,2.1,19,0.023,20,1.151,25,1.56,28,1.359,29,0.376,30,0.501,33,0.21,34,0.062,37,1.535,44,1.26,45,1.756,47,0.014,48,0.014,97,1.778,104,1.756,105,1.385,106,1.656,112,0.761,120,2.517,123,2.921,143,1.93,145,1.342,230,1.399,231,1.9,232,1.9,233,1.9,234,2.205,238,1.342,239,1.945,241,1.535,242,1.648,243,1.9,244,1.9,245,1.342,246,2.732,248,2.181,249,1.342,250,2.732,252,1.342,254,2.732,256,1.93,257,1.648,258,1.778,261,1.342,263,1.342,265,1.93,267,1.93,269,1.93,271,2.647,273,1.93,337,1.99,382,3.481,383,3.481,384,2.815,424,2.99,425,3.778,426,2.647,427,2.333,428,2.647,429,3.111,430,3.111,431,3.111,432,3.111,433,3.968,434,3.111,435,2.921,436,2.647,437,3.313,438,3.111,439,3.111,440,3.111,441,3.111,442,3.111,443,3.111]],["title/modules/EventTicketTypesModule.html",[49,0.988,444,2.171]],["body/modules/EventTicketTypesModule.html",[2,1.775,3,0.3,4,0.265,5,0.265,19,0.023,29,0.434,30,0.715,33,0.3,34,0.089,47,0.018,48,0.018,49,1.726,51,1.798,52,1.798,53,2.046,54,2.046,55,1.798,56,2.817,57,2.046,67,2.574,68,2.046,69,1.916,337,2.001,383,2.539,384,2.598,424,4.151,425,2.755,435,3.858,436,3.778,444,4.299,445,3.778,446,3.778,447,2.912,448,4.441,449,4.441,450,3.016]],["title/injectables/EventTicketTypesService.html",[84,0.877,435,2]],["body/injectables/EventTicketTypesService.html",[3,0.133,4,0.118,5,0.118,15,0.318,16,0.883,19,0.024,20,1.053,25,1.363,27,1.915,28,1.274,29,0.325,30,0.318,33,0.133,34,0.039,44,0.799,45,1.443,47,0.01,48,0.01,84,0.784,85,0.909,104,1.608,105,1.268,106,1.516,112,0.845,141,3.212,143,1.939,145,1.349,157,1.224,166,2.174,174,2.845,175,2.317,176,1.787,178,2.898,183,1.787,230,0.993,231,1.349,232,1.349,233,1.349,234,1.349,238,1.349,239,1.478,243,1.907,244,0.851,245,1.349,248,2.27,249,1.349,252,1.349,261,0.851,263,0.851,280,1.224,281,2.075,284,3.179,289,1.224,290,1.224,291,3.179,296,2.552,300,0.883,301,1.045,302,2.409,303,2.409,304,1.339,305,1.939,307,2.409,308,1.339,310,1.224,311,2.22,312,1.339,313,1.939,315,3.645,317,1.127,318,1.224,320,1.224,321,1.224,337,2.314,356,5.189,382,2.929,383,3.183,384,2.78,425,3.455,428,2.659,433,3.455,435,1.787,437,2.352,447,2.317,450,1.339,451,1.678,452,3.126,453,1.972,454,1.972,455,1.972,456,1.972,457,1.972,458,1.972,459,3.126,460,1.972,461,3.126,462,1.972,463,1.484,464,1.972,465,1.972,466,3.126,467,1.972,468,5.735,469,4.418,470,3.126,471,1.972,472,1.972,473,1.678,474,3.126,475,1.678,476,1.972,477,1.972]],["title/controllers/EventsController.html",[0,1.112,478,2.376]],["body/controllers/EventsController.html",[0,1.069,2,1.069,3,0.227,4,0.201,5,0.201,15,0.542,16,1.313,18,2.161,19,0.023,20,1.184,25,1.606,28,1.383,29,0.389,30,0.542,33,0.227,34,0.067,37,1.659,43,1.362,44,1.362,45,1.807,47,0.015,48,0.015,97,1.922,104,1.807,105,1.425,106,1.704,112,0.783,120,2.658,123,3.046,230,1.477,231,2.006,232,2.006,233,2.006,234,2.006,238,1.451,239,2.028,241,1.659,242,1.782,243,2.006,244,2.006,245,1.451,246,2.885,248,2.235,249,1.451,250,2.885,252,1.451,254,2.885,256,2.086,257,1.782,258,1.922,261,1.451,263,1.451,265,2.086,267,2.086,269,2.086,273,2.086,334,3.568,447,2.3,450,2.283,478,3.157,479,2.861,480,2.53,481,2.861,482,3.363,483,3.363,484,3.363,485,3.363,486,4.046,487,3.363,488,3.498,489,3.363,490,3.363,491,3.363,492,3.363,493,2.53,494,3.363,495,3.363]],["title/modules/EventsModule.html",[49,0.988,63,2.171]],["body/modules/EventsModule.html",[2,1.779,3,0.301,4,0.266,5,0.266,19,0.023,29,0.434,30,0.717,33,0.301,34,0.089,47,0.018,48,0.018,49,1.728,51,1.803,52,1.803,53,2.052,54,2.052,55,1.803,56,2.82,57,2.052,63,4.301,67,2.579,68,2.052,69,1.922,71,4.212,337,1.595,384,2.267,425,2.763,444,4.19,447,2.914,450,3.024,478,4.156,496,3.789,497,3.789,498,3.789,499,4.453,500,4.453,501,4.453]],["title/injectables/EventsService.html",[84,0.877,447,1.51]],["body/injectables/EventsService.html",[3,0.12,4,0.106,5,0.106,15,0.286,16,0.812,19,0.024,20,1.01,25,1.302,27,2.053,28,1.239,29,0.309,30,0.286,33,0.12,34,0.035,43,0.72,44,0.72,45,1.465,47,0.009,48,0.009,84,0.721,85,0.819,104,1.542,105,1.216,106,1.454,112,0.719,141,3.148,145,0.767,157,1.102,166,2.402,174,3.241,175,2.673,176,2.613,178,2.925,183,2.613,230,0.914,231,1.241,232,1.241,233,1.241,234,1.563,238,1.241,239,1.74,241,1.787,242,0.941,243,1.796,244,0.767,245,1.241,248,2.266,249,1.241,252,1.241,261,0.767,263,0.767,280,1.102,281,1.981,284,3.035,289,2.582,290,1.102,291,3.195,292,1.102,293,3.326,296,2.84,297,3.132,298,3.132,300,1.022,301,0.941,302,2.247,303,2.582,304,1.207,305,2.836,307,2.247,308,1.207,310,1.102,311,2.07,312,1.207,313,2.836,314,2.446,315,3.68,317,1.016,318,1.784,320,1.102,321,1.102,334,2.796,337,2.418,341,1.337,345,4.167,376,2.164,384,1.164,387,2.247,447,1.241,463,3.681,473,1.512,475,1.512,480,2.164,481,2.446,486,3.326,488,2.164,502,1.512,503,3.622,504,1.777,505,1.777,506,1.777,507,1.777,508,1.777,509,1.777,510,1.777,511,3.622,512,2.875,513,4.571,514,1.777,515,1.337,516,1.777,517,1.777,518,2.875,519,2.875,520,1.777,521,1.777,522,2.875,523,1.777,524,1.777,525,1.777,526,1.777,527,2.875,528,2.875,529,1.777,530,1.777,531,1.777,532,1.777,533,1.777,534,1.512]],["title/modules/PrismaModule.html",[49,0.988,64,2.171]],["body/modules/PrismaModule.html",[3,0.315,4,0.278,5,0.278,19,0.023,29,0.389,30,0.751,33,0.315,34,0.093,47,0.018,48,0.018,49,1.765,51,1.889,52,1.889,53,2.149,54,2.149,55,1.889,56,2.88,57,2.88,64,4.295,67,2.654,68,2.149,69,2.013,200,4.901,281,2.901,535,3.968,536,3.968,537,3.968,538,4.664,539,4.664]],["title/injectables/PrismaService.html",[84,0.877,281,1.417]],["body/injectables/PrismaService.html",[3,0.285,4,0.252,5,0.252,15,0.679,16,1.526,19,0.023,20,1.171,25,1.438,29,0.403,30,0.679,33,0.285,34,0.084,43,1.707,47,0.017,48,0.017,74,3.172,84,1.355,85,1.942,104,1.263,105,0.995,106,1.19,112,0.547,141,3.284,145,1.819,165,3.172,178,2.666,258,2.41,281,2.189,403,2.615,540,3.586,541,3.09,542,5.967,543,6.658,544,6.658,545,4.215,546,5.01,547,4.215,548,4.215,549,4.215,550,4.215,551,4.215,552,4.215,553,4.215,554,4.215,555,4.215]],["title/guards/RolesGuard.html",[137,2.633,197,2.376]],["body/guards/RolesGuard.html",[3,0.283,4,0.25,5,0.25,15,0.674,16,1.518,19,0.023,20,1.055,25,1.113,29,0.424,30,0.674,33,0.283,34,0.083,43,1.694,45,1.611,47,0.017,48,0.017,83,2.391,84,1.348,104,1.611,105,1.27,106,1.518,112,0.698,139,2.84,142,5.338,145,1.805,148,5.653,150,4.575,151,5.338,153,3.558,163,2.84,165,3.147,166,2.178,169,3.558,170,3.558,171,3.558,197,3.652,214,1.927,352,4.575,403,2.595,410,2.84,556,3.558,557,4.182,558,4.182,559,4.182,560,3.147,561,4.182,562,5.378,563,4.182,564,4.182,565,4.182]],["title/classes/SignInDto.html",[34,0.07,113,2.376]],["body/classes/SignInDto.html",[3,0.292,4,0.258,5,0.258,7,1.083,15,0.696,18,1.966,19,0.023,20,1.077,28,1.4,29,0.292,33,0.292,34,0.11,47,0.018,48,0.018,112,0.824,113,3.728,212,4.452,214,2.926,300,1.55,322,1.644,325,1.852,326,1.745,328,2.369,331,3.45,332,3.406,333,2.289,409,4.933,413,3.675,416,3.675,420,4.671,421,3.675,422,3.675,566,5.135,567,3.675,568,5.49,569,4.319,570,4.319]],["title/controllers/TicketsController.html",[0,1.112,571,2.376]],["body/controllers/TicketsController.html",[0,1.069,2,1.069,3,0.227,4,0.201,5,0.201,15,0.542,16,1.313,18,2.161,19,0.023,20,1.184,25,1.606,28,1.383,29,0.389,30,0.542,33,0.227,34,0.067,37,1.659,43,1.362,44,1.362,45,1.807,47,0.015,48,0.015,97,1.922,104,1.807,105,1.425,106,1.704,112,0.783,120,2.658,123,3.046,230,1.477,231,2.006,232,2.006,233,2.006,234,2.006,238,1.451,239,2.028,241,1.659,242,1.782,243,2.006,244,2.006,245,1.451,246,2.885,248,2.235,249,1.451,250,2.885,252,1.451,254,2.885,256,2.086,257,1.782,258,1.922,261,1.451,263,1.451,265,2.086,267,2.086,269,2.086,273,2.086,357,2.086,394,3.568,493,2.53,571,3.157,572,2.861,573,2.861,574,3.363,575,3.363,576,3.363,577,3.363,578,4.046,579,3.363,580,3.046,581,2.861,582,3.498,583,3.363,584,3.363,585,3.363,586,3.363,587,3.363,588,3.363]],["title/modules/TicketsModule.html",[49,0.988,65,2.171]],["body/modules/TicketsModule.html",[2,1.801,3,0.307,4,0.271,5,0.271,19,0.023,29,0.437,30,0.732,33,0.307,34,0.091,47,0.018,48,0.018,49,1.744,51,1.84,52,1.84,53,2.093,54,2.093,55,1.84,56,2.846,57,2.093,65,4.318,67,2.611,68,2.093,69,1.961,447,2.929,571,4.194,580,3.88,581,3.865,589,3.865,590,3.865,591,4.543,592,4.543,593,3.865]],["title/injectables/TicketsService.html",[84,0.877,580,2]],["body/injectables/TicketsService.html",[3,0.115,4,0.101,5,0.101,7,1.266,8,2.082,9,2.082,15,0.273,16,0.781,19,0.023,20,0.99,25,1.526,27,2.597,28,1.198,29,0.301,30,0.273,33,0.115,34,0.034,35,2.082,36,1.879,37,2.49,38,2.969,44,0.686,45,1.336,47,0.009,48,0.009,84,0.694,85,0.781,92,3.699,104,1.433,105,1.13,106,1.351,112,0.621,141,3.089,143,1.717,145,1.194,154,1.879,166,1.938,174,2.675,175,2.475,176,0.969,178,2.597,183,1.582,214,2.055,230,0.879,231,1.194,232,1.194,233,1.194,234,1.747,238,0.731,239,1.335,243,1.513,244,0.731,245,1.194,248,2.402,249,1.194,252,1.194,257,1.466,261,0.731,263,0.731,280,1.052,281,2.044,284,2.767,289,1.717,290,1.717,291,3.476,292,1.052,296,2.363,300,1.259,302,1.717,303,3.267,305,2.176,307,1.052,311,1.582,313,1.717,315,3.75,317,1.582,318,1.052,320,1.052,321,1.052,325,1.365,326,1.604,337,1.886,357,3.267,373,1.275,384,2.808,394,2.735,447,1.747,463,1.275,480,2.082,534,1.442,573,2.354,578,3.38,580,2.314,582,2.082,593,1.442,594,1.442,595,2.748,596,4.071,597,4.047,598,4.047,599,1.695,600,2.354,601,2.354,602,1.695,603,2.082,604,2.082,605,4.071,606,4.785,607,4.785,608,1.695,609,2.639,610,2.767,611,2.639,612,1.695,613,2.354,614,2.082,615,1.695,616,2.354,617,3.443,618,2.767,619,1.695,620,2.082,621,1.695,622,1.616,623,2.767,624,4.071,625,1.442,626,1.695,627,1.695,628,1.442,629,1.442,630,1.695,631,3.506,632,1.695,633,1.695,634,1.695,635,1.695]],["title/classes/UpdateCategoryDto.html",[34,0.07,253,2.171]],["body/classes/UpdateCategoryDto.html",[3,0.302,4,0.267,5,0.267,7,1.12,19,0.023,29,0.379,33,0.302,34,0.122,47,0.018,48,0.018,112,0.728,230,1.419,236,3.785,253,3.479,262,3.36,293,3.479,300,1.583,322,1.7,324,3.36,325,1.891,326,1.782,427,2.366,541,3.785,622,2.584,636,3.799,637,3.479,638,3.479,639,3.988,640,3.807,641,5.607,642,3.205,643,3.479,644,5.607,645,3.479,646,2.553]],["title/classes/UpdateEventDto.html",[34,0.07,486,2.171]],["body/classes/UpdateEventDto.html",[3,0.303,4,0.267,5,0.267,7,1.123,19,0.023,29,0.38,33,0.303,34,0.122,47,0.018,48,0.018,112,0.729,230,1.423,300,1.586,322,1.705,325,1.894,326,1.785,334,3.789,336,3.37,337,2.012,427,2.373,486,3.485,488,3.37,541,3.789,622,2.588,637,3.485,638,3.485,639,3.992,642,3.211,643,3.485,645,3.485,646,2.56,647,3.81,648,4.779,649,5.617,650,5.617]],["title/classes/UpdateEventTicketTypeDto.html",[34,0.07,433,2.171]],["body/classes/UpdateEventTicketTypeDto.html",[3,0.279,4,0.246,5,0.246,7,1.035,19,0.023,29,0.36,33,0.279,34,0.118,47,0.017,48,0.017,112,0.81,166,2.159,230,1.312,300,1.505,322,1.571,325,1.798,326,1.694,337,2.371,382,3.696,383,2.359,384,2.728,386,3.106,387,3.874,427,2.187,433,3.308,437,3.106,541,3.696,622,2.457,637,3.308,638,3.308,639,3.874,640,3.621,642,3.048,643,3.308,645,3.874,646,2.359,651,3.511,652,4.012,653,5.332,654,5.332,655,5.332,656,3.106]],["title/classes/UpdateTicketDto.html",[34,0.07,578,2.171]],["body/classes/UpdateTicketDto.html",[3,0.286,4,0.253,5,0.253,7,1.063,19,0.023,29,0.367,33,0.286,34,0.119,47,0.017,48,0.017,112,0.704,166,2.197,230,1.347,300,1.531,322,1.613,325,1.829,326,1.724,328,2.341,384,2.197,387,3.913,394,3.726,396,3.189,398,5.365,427,2.246,541,3.726,578,3.365,582,3.189,622,2.499,637,3.365,638,3.365,639,3.913,640,3.683,642,3.101,643,3.365,645,3.913,646,2.423,652,4.081,656,3.189,657,3.606,658,5.424,659,5.424]],["title/classes/UpdateUserDto.html",[34,0.07,660,2.171]],["body/classes/UpdateUserDto.html",[3,0.286,4,0.253,5,0.253,7,1.063,19,0.023,29,0.367,33,0.286,34,0.119,47,0.017,48,0.017,112,0.704,166,2.197,214,2.499,223,4.282,230,1.347,300,1.531,322,1.613,325,1.829,326,1.724,328,2.341,406,3.726,408,3.189,410,4.282,427,2.246,541,3.726,622,2.499,637,3.365,638,3.365,639,3.913,640,3.683,642,3.101,643,3.365,645,3.913,646,2.423,652,4.081,656,3.189,660,3.365,661,3.606,662,4.614,663,5.424,664,3.189]],["title/controllers/UsersController.html",[0,1.112,665,2.376]],["body/controllers/UsersController.html",[0,0.755,2,0.755,3,0.161,4,0.142,5,0.142,7,1.387,11,3.073,12,3.073,15,0.383,16,1.02,18,1.881,19,0.023,20,1.03,22,3.073,25,1.647,27,1.782,28,1.268,29,0.355,30,0.383,33,0.161,34,0.047,36,1.613,37,2.922,38,1.474,39,1.474,43,0.962,44,0.962,45,1.573,47,0.012,48,0.012,92,3.316,97,1.358,104,1.573,105,1.24,106,1.483,112,0.682,120,2.065,123,2.065,127,2.453,175,1.559,190,2.408,214,3.203,230,1.148,231,1.559,232,1.559,233,1.559,234,2.387,238,1.025,239,1.999,241,1.172,242,1.259,243,2.266,244,2.107,245,1.025,246,2.241,248,2.465,249,1.025,250,2.241,252,1.025,254,2.241,256,1.474,257,2.316,258,1.358,261,1.025,263,1.025,265,1.474,267,1.474,269,1.474,273,1.474,296,1.914,300,1.673,301,1.914,317,2.065,325,1.647,326,1.552,406,3.286,493,1.788,595,2.453,603,3.289,604,2.718,609,3.674,611,3.674,613,3.073,614,3.674,620,2.718,622,1.664,660,3.765,664,2.718,665,3.566,666,2.021,667,4.706,668,2.021,669,2.376,670,2.376,671,2.376,672,3.073,673,3.612,674,2.376,675,2.376,676,3.612,677,2.376,678,2.021,679,2.376,680,2.376,681,2.376,682,2.376,683,2.376,684,2.376,685,2.376,686,2.376]],["title/modules/UsersModule.html",[49,0.988,66,2]],["body/modules/UsersModule.html",[2,1.801,3,0.307,4,0.271,5,0.271,19,0.023,29,0.437,30,0.732,33,0.307,34,0.091,47,0.018,48,0.018,49,1.744,51,1.84,52,1.84,53,2.093,54,2.093,55,1.84,56,2.846,57,2.093,66,3.978,67,2.611,68,2.093,69,1.961,190,3.348,281,2.749,292,2.819,665,4.194,678,3.865,687,4.543,688,4.543,689,4.543,690,4.543]],["title/injectables/UsersService.html",[84,0.877,190,1.726]],["body/injectables/UsersService.html",[3,0.086,4,0.076,5,0.076,7,1.222,8,1.642,9,1.642,15,0.206,16,0.616,19,0.024,20,0.916,25,1.484,27,2.493,28,1.236,29,0.257,30,0.206,33,0.086,34,0.025,35,1.642,36,1.482,37,2.405,38,2.099,39,1.354,43,0.517,44,0.517,45,1.399,47,0.007,48,0.007,83,1.934,84,0.547,85,0.588,92,3.432,104,1.399,105,1.102,106,1.318,112,0.606,141,3.012,145,0.551,154,1.482,157,0.792,158,2.151,166,2.11,174,2.897,175,2.554,176,2.532,178,2.698,183,2.532,190,1.669,212,3.631,213,1.642,214,3.216,216,1.856,223,0.866,230,0.693,231,0.942,232,0.942,233,0.942,234,1.911,238,0.942,239,1.447,243,1.911,244,0.551,245,0.942,248,2.283,249,0.942,252,0.942,257,1.156,261,0.551,263,0.551,280,0.792,281,1.794,284,2.571,289,1.774,290,2.897,291,3.025,292,0.792,296,2.677,297,2.151,298,2.151,300,1.25,301,1.515,302,3.025,303,2.099,304,0.866,305,3.461,307,1.774,308,0.866,310,0.792,311,1.634,312,0.866,313,2.748,315,3.317,317,1.634,318,1.354,320,1.774,321,0.792,325,1.141,326,1.606,357,2.099,406,2.532,409,3.92,595,1.482,596,2.879,600,1.856,601,1.856,603,1.642,604,1.642,605,4.299,609,3.119,611,2.546,614,3.119,620,1.642,622,1.005,624,4.653,625,3.235,628,3.768,629,3.768,660,3.025,662,1.856,664,1.642,667,3.526,668,1.856,672,1.856,691,1.085,692,2.182,693,2.182,694,1.276,695,1.276,696,3.526,697,1.276,698,1.276,699,2.182,700,1.276,701,2.182,702,1.276,703,2.182,704,2.182,705,2.182,706,1.276,707,1.276,708,4.429,709,1.276,710,4.144,711,2.182,712,2.182,713,1.276,714,1.276,715,1.276,716,2.182,717,2.182,718,2.182,719,2.182,720,1.856,721,1.276,722,1.276,723,3.384,724,1.276,725,1.276,726,1.276,727,1.276,728,1.276,729,1.276]],["title/coverage.html",[730,3.595]],["body/coverage.html",[0,1.963,1,2.017,5,0.177,6,2.527,19,0.023,31,1.698,34,0.132,47,0.014,48,0.014,55,1.203,84,1.584,86,2.527,95,2.017,96,2.527,112,0.385,113,2.017,125,1.698,127,2.017,137,3.206,138,2.017,140,2.527,160,2.017,164,2.235,175,1.282,190,1.465,197,2.017,206,2.527,227,2.017,228,2.527,236,1.698,253,1.843,259,1.698,279,2.527,281,1.203,311,3.88,323,2.527,324,3.206,334,1.698,335,2.527,336,3.206,337,1.526,382,1.698,383,3.111,384,2.559,385,2.527,386,3.206,394,1.698,395,2.527,396,3.206,406,1.698,407,2.527,408,3.206,424,2.017,425,2.643,426,2.527,433,1.843,435,1.698,447,1.282,451,2.527,478,2.017,479,2.527,486,1.843,502,2.527,515,2.235,540,2.527,546,2.235,556,2.527,560,2.235,566,2.527,567,2.527,571,2.017,572,2.527,578,1.843,580,1.698,594,2.527,636,2.527,647,2.527,651,2.527,657,2.527,660,1.843,661,2.527,665,2.017,666,2.527,691,2.527,730,2.235,731,2.527,732,2.97,733,2.97,734,7.04,735,4.982,736,3.625,737,5.997,738,4.26,739,6.609,740,4.26,741,2.527,742,3.625,743,4.982,744,3.625,745,3.625,746,2.527,747,2.97,748,5.442,749,2.97,750,2.97,751,2.97,752,4.26,753,2.97,754,2.97,755,4.26,756,2.97,757,2.527,758,2.527,759,2.97,760,2.97]],["title/dependencies.html",[52,1.704,761,2.484]],["body/dependencies.html",[19,0.023,30,0.804,34,0.1,47,0.019,48,0.019,52,2.02,74,3.753,159,3.387,162,4.244,163,3.387,213,3.753,333,2.643,403,3.095,427,2.643,646,2.851,762,6.437,763,4.988,764,4.988,765,4.988,766,4.988,767,4.988,768,4.988,769,4.988,770,4.244,771,4.988,772,4.988,773,4.988]],["title/miscellaneous/functions.html",[774,1.983,775,3.58]],["body/miscellaneous/functions.html",[7,1.183,15,0.76,19,0.021,25,1.256,28,1.369,47,0.019,48,0.019,55,2.545,104,1.414,105,1.483,106,1.332,112,0.612,337,2.078,345,4.728,515,4.366,616,4.015,720,4.015,741,4.015,742,4.015,757,4.015,758,4.937,774,3.205,775,4.015,776,4.719,777,4.719,778,4.719,779,4.719,780,4.719,781,4.719,782,4.719,783,4.719,784,4.719,785,4.719,786,4.015,787,4.719,788,4.719,789,4.719,790,4.719,791,4.719,792,4.719,793,4.719,794,4.719,795,4.719,796,4.719,797,4.719]],["title/index.html",[15,0.47,798,2.92,799,2.92]],["body/index.html",[4,0.182,7,0.763,19,0.022,47,0.014,48,0.014,69,2.609,88,5.144,116,2.59,310,1.889,622,1.403,642,1.741,648,2.59,730,2.291,731,3.689,800,3.045,801,3.045,802,5.051,803,4.336,804,3.045,805,3.045,806,3.045,807,3.045,808,4.336,809,5.051,810,3.045,811,3.045,812,5.504,813,3.045,814,5.504,815,6.36,816,3.045,817,6.221,818,3.045,819,3.045,820,3.045,821,4.336,822,3.045,823,4.336,824,3.045,825,5.051,826,3.045,827,4.336,828,3.045,829,3.045,830,3.045,831,3.045,832,3.045,833,5.504,834,6.36,835,2.59,836,4.336,837,3.045,838,3.045,839,3.045,840,3.045,841,6.046,842,4.336,843,5.504,844,4.336,845,3.045,846,3.045,847,4.336,848,6.046,849,5.504,850,3.045,851,4.336,852,3.045,853,3.045,854,3.045,855,3.045,856,5.504,857,3.045,858,3.045,859,3.045,860,3.045,861,4.336,862,3.045,863,3.045,864,3.045,865,3.045,866,4.336,867,3.045,868,3.045,869,3.045,870,4.336,871,3.045,872,3.045,873,4.682,874,4.336,875,3.045,876,3.045,877,3.045,878,3.045,879,3.045,880,3.045,881,3.045,882,3.045,883,4.336,884,3.045,885,3.045,886,3.045,887,3.045,888,5.051,889,3.045,890,3.045,891,3.045,892,3.045,893,3.045,894,3.045,895,4.336,896,3.045,897,3.045,898,3.045,899,3.045,900,4.336,901,3.045,902,3.045,903,3.045,904,4.336,905,4.336,906,3.045,907,3.045,908,3.045,909,3.045,910,3.045,911,3.045,912,3.045,913,3.045,914,3.045,915,3.045,916,3.045,917,2.59,918,3.045,919,3.045,920,3.045,921,3.045,922,3.045,923,3.045,924,2.59]],["title/modules.html",[51,1.935]],["body/modules.html",[19,0.019,47,0.019,48,0.019,50,3.355,51,2.001,61,3.066,62,3.066,63,3.066,64,3.066,65,3.066,66,2.825,444,3.066,873,6.013,925,7.068,926,7.068,927,7.068]],["title/overview.html",[928,4.065]],["body/overview.html",[2,1.134,19,0.023,31,3.142,47,0.015,48,0.015,49,1.007,50,4.782,51,1.445,52,1.445,53,1.644,54,1.644,55,1.445,56,1.644,57,1.644,58,3.035,59,3.035,60,3.035,61,4.205,62,3.823,63,4.033,64,3.943,65,4.033,66,3.78,67,2.231,68,1.644,69,1.54,85,1.644,125,3.715,139,2.423,186,3.035,187,3.035,189,3.035,190,2.907,259,3.142,275,3.035,276,3.035,281,2.678,322,1.358,435,3.142,444,4.033,445,3.035,446,3.035,447,2.659,496,3.035,497,3.035,498,3.035,535,3.035,536,3.035,537,3.035,580,3.142,589,3.035,590,3.035,928,3.035,929,4.842,930,3.568,931,3.568,932,3.568]],["title/properties.html",[328,1.816,761,2.484]],["body/properties.html",[7,1.367,19,0.023,47,0.02,48,0.02,328,2.353,917,4.639,924,4.639,933,5.453,934,5.453,935,5.453]],["title/miscellaneous/variables.html",[774,1.983,936,3.58]],["body/miscellaneous/variables.html",[15,0.62,19,0.023,28,1.064,39,3.541,47,0.016,48,0.016,83,2.198,112,0.741,127,4.292,139,3.458,160,3.458,164,3.831,167,3.272,172,3.272,175,1.66,180,2.894,241,3.203,242,3.441,296,2.038,326,1.222,410,2.612,546,4.295,560,3.831,595,2.612,617,3.272,696,3.272,736,3.272,744,3.272,745,3.272,746,5.791,770,5.169,774,2.612,786,3.272,835,4.856,936,3.272,937,5.092,938,5.092,939,5.092,940,3.846,941,3.846,942,3.846,943,3.846,944,3.846,945,5.092,946,3.846,947,2.894,948,3.846,949,6.076,950,6.32,951,5.708,952,5.092,953,5.092,954,5.092,955,3.846,956,3.846,957,5.092,958,3.846,959,3.846,960,5.092,961,3.846,962,3.846,963,3.846,964,3.846,965,3.846,966,3.846]],["title/routes.html",[947,3.595]],["body/routes.html",[19,0.021,47,0.021,48,0.021,947,4.25]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":311,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":934,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":244,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1/1",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":931,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["13/13",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["1h",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":932,"title":{},"body":{"overview.html":{}}}],["2/2",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":318,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":304,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["204",{"_index":321,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["25",{"_index":308,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["3/3",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["5.1.1",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["6.3.1",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":930,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":929,"title":{},"body":{"overview.html":{}}}],["8/8",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["_count",{"_index":717,"title":{},"body":{"injectables/UsersService.html":{}}}],["access",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_token",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["address",{"_index":338,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["allow",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowed",{"_index":358,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["allowing",{"_index":648,"title":{},"body":{"classes/UpdateEventDto.html":{},"index.html":{}}}],["allows",{"_index":640,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["already",{"_index":297,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":910,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":808,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":50,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":31,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argument",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["assigns",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["attach",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":95,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":138,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":61,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":917,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":125,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":373,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"injectables/TicketsService.html":{}}}],["await",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":851,"title":{},"body":{"index.html":{}}}],["backers",{"_index":911,"title":{},"body":{"index.html":{}}}],["based",{"_index":846,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":722,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(pass",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensaltsync(10",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["bearer",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{}}}],["being",{"_index":390,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{}}}],["belongs",{"_index":351,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["birth",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["birthdate",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["board",{"_index":903,"title":{},"body":{"index.html":{}}}],["body",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":352,"title":{},"body":{"classes/CreateEventDto.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":927,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":925,"title":{},"body":{"modules.html":{}}}],["building",{"_index":803,"title":{},"body":{"index.html":{}}}],["business",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["canactivate",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["categories",{"_index":229,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["categories.controller",{"_index":278,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":260,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categoriescontroller",{"_index":227,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":62,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":259,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":293,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"injectables/EventsService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category's",{"_index":641,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto",{"_index":262,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":324,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:13",{"_index":330,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["categoryid",{"_index":339,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["channel",{"_index":876,"title":{},"body":{"index.html":{}}}],["characters",{"_index":793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["check",{"_index":841,"title":{},"body":{"index.html":{}}}],["class",{"_index":34,"title":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":322,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":861,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":845,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":275,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":276,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":496,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_imports",{"_index":497,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":498,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventtickettypesmodule",{"_index":445,"title":{},"body":{"modules/EventTicketTypesModule.html":{},"overview.html":{}}}],["cluster_eventtickettypesmodule_providers",{"_index":446,"title":{},"body":{"modules/EventTicketTypesModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":535,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":536,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":537,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":589,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_providers",{"_index":590,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":687,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":688,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":607,"title":{},"body":{"injectables/TicketsService.html":{}}}],["come",{"_index":867,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":546,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('jwt_secret",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('node_env",{"_index":552,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configuration",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirmation",{"_index":676,"title":{},"body":{"controllers/UsersController.html":{}}}],["conflictexception",{"_index":289,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["const",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"guards/RolesGuard.html":{},"injectables/TicketsService.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["constant",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constants",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constants/jwtconstants",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["constructor",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":545,"title":{},"body":{"injectables/PrismaService.html":{}}}],["constructor(jwtservice",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(prismaservice",{"_index":280,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":557,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(usersservice",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructs",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["contact",{"_index":370,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["containing",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["context",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["control",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":264,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('event",{"_index":438,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["controller('events",{"_index":489,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('tickets",{"_index":583,"title":{},"body":{"controllers/TicketsController.html":{}}}],["controller('users",{"_index":680,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["converting",{"_index":787,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coordinate",{"_index":365,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["courses",{"_index":882,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":730,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":230,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":265,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["create(createcategorydto",{"_index":235,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["create(createeventdto",{"_index":481,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["create(createeventtickettypedto",{"_index":428,"title":{},"body":{"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{}}}],["create(createticketdto",{"_index":573,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{}}}],["create(createuserdto",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createcategorydto",{"_index":236,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.name",{"_index":295,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["created",{"_index":301,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createeventdto",{"_index":334,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["createeventdto.categoryid",{"_index":519,"title":{},"body":{"injectables/EventsService.html":{}}}],["createeventdto.customtickets",{"_index":520,"title":{},"body":{"injectables/EventsService.html":{}}}],["createeventdto.slug",{"_index":518,"title":{},"body":{"injectables/EventsService.html":{}}}],["createeventdto.ticketdefaultprice",{"_index":521,"title":{},"body":{"injectables/EventsService.html":{}}}],["createeventtickettypedto",{"_index":382,"title":{"classes/CreateEventTicketTypeDto.html":{}},"body":{"classes/CreateEventTicketTypeDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"classes/UpdateEventTicketTypeDto.html":{},"coverage.html":{}}}],["createeventtickettypedto.eventid",{"_index":464,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["creates",{"_index":603,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createticketdto",{"_index":394,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["createticketdto.eventid",{"_index":627,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticketdto.userid",{"_index":626,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createuserdto",{"_index":406,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":327,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{}}}],["creation",{"_index":604,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":356,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventTicketTypesService.html":{}}}],["customeventticket",{"_index":511,"title":{},"body":{"injectables/EventsService.html":{}}}],["customtickets",{"_index":340,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["data",{"_index":300,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"classes/SignInDto.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":601,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["database/prisma/prisma.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["database/prisma/prisma.service",{"_index":292,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":341,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{},"injectables/EventsService.html":{}}}],["date(createeventdto.date",{"_index":524,"title":{},"body":{"injectables/EventsService.html":{}}}],["date(createuserdto.birthdate",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["declarations",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["decorators/public.decorator",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["decorators/roles.decorator",{"_index":561,"title":{},"body":{"guards/RolesGuard.html":{}}}],["deeper",{"_index":878,"title":{},"body":{"index.html":{}}}],["default",{"_index":241,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CreateEventDto.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":257,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":250,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["deleted",{"_index":320,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["deletes",{"_index":620,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":52,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":833,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":850,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":842,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":860,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":605,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["dev",{"_index":553,"title":{},"body":{"injectables/PrismaService.html":{}}}],["development",{"_index":818,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":890,"title":{},"body":{"index.html":{}}}],["diacritical",{"_index":785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["disable",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["discord",{"_index":875,"title":{},"body":{"index.html":{}}}],["dive",{"_index":877,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":731,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":637,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":261,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":263,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["during",{"_index":629,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":828,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":804,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":839,"title":{},"body":{"index.html":{}}}],["email",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["enforce",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensure",{"_index":837,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":894,"title":{},"body":{"index.html":{}}}],["error",{"_index":305,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["eslint",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["eslint/no",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["event",{"_index":337,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["event's",{"_index":649,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["event.dto",{"_index":488,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{}}}],["event.dto.ts",{"_index":336,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["event.dto.ts:103",{"_index":375,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:112",{"_index":350,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:21",{"_index":368,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:29",{"_index":371,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:38",{"_index":362,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:46",{"_index":348,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:54",{"_index":364,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:62",{"_index":367,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:70",{"_index":360,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:78",{"_index":369,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:85",{"_index":372,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:94",{"_index":354,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.name",{"_index":529,"title":{},"body":{"injectables/EventsService.html":{}}}],["event.ticketcount",{"_index":534,"title":{},"body":{"injectables/EventsService.html":{},"injectables/TicketsService.html":{}}}],["eventid",{"_index":387,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"injectables/EventsService.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{}}}],["eventname",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["events",{"_index":480,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{}}}],["events.controller",{"_index":500,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.service",{"_index":450,"title":{},"body":{"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events/events.service",{"_index":593,"title":{},"body":{"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["eventscontroller",{"_index":478,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventservice",{"_index":598,"title":{},"body":{"injectables/TicketsService.html":{}}}],["eventsmodule",{"_index":63,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["eventsservice",{"_index":447,"title":{"injectables/EventsService.html":{}},"body":{"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventtickettype",{"_index":468,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["eventtickettype.eventid",{"_index":472,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["eventtickettype.ticketcount",{"_index":474,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["eventtickettypeid",{"_index":461,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["eventtickettypes",{"_index":466,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["eventtickettypescontroller",{"_index":424,"title":{"controllers/EventTicketTypesController.html":{}},"body":{"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"coverage.html":{}}}],["eventtickettypesmodule",{"_index":444,"title":{"modules/EventTicketTypesModule.html":{}},"body":{"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["eventtickettypesservice",{"_index":435,"title":{"injectables/EventTicketTypesService.html":{}},"body":{"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"coverage.html":{},"overview.html":{}}}],["example",{"_index":814,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["existing",{"_index":623,"title":{},"body":{"injectables/TicketsService.html":{}}}],["exists",{"_index":298,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":880,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":541,"title":{},"body":{"injectables/PrismaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["extracttokenfromheader",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{}}}],["fast",{"_index":854,"title":{},"body":{"index.html":{}}}],["features",{"_index":863,"title":{},"body":{"index.html":{}}}],["few",{"_index":856,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":231,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@query('page",{"_index":267,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["findall(page",{"_index":238,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":232,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":269,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":245,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["focus",{"_index":862,"title":{},"body":{"index.html":{}}}],["follow",{"_index":897,"title":{},"body":{"index.html":{}}}],["format",{"_index":618,"title":{},"body":{"injectables/TicketsService.html":{}}}],["found",{"_index":315,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":802,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["full",{"_index":893,"title":{},"body":{"index.html":{}}}],["function",{"_index":742,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionalities",{"_index":90,"title":{},"body":{"injectables/AppService.html":{}}}],["functions",{"_index":775,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":859,"title":{},"body":{"index.html":{}}}],["generate",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":616,"title":{},"body":{"injectables/TicketsService.html":{},"miscellaneous/functions.html":{}}}],["generateslug",{"_index":515,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateslug(createeventdto.name",{"_index":517,"title":{},"body":{"injectables/EventsService.html":{}}}],["generateslug(eventname",{"_index":778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generateslug(updateeventdto.name",{"_index":530,"title":{},"body":{"injectables/EventsService.html":{}}}],["generateticket",{"_index":597,"title":{},"body":{"injectables/TicketsService.html":{}}}],["get(':id",{"_index":246,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":798,"title":{"index.html":{}},"body":{}}],["given",{"_index":781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["global",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["graph",{"_index":885,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["grow",{"_index":907,"title":{},"body":{"index.html":{}}}],["guard",{"_index":137,"title":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["guards/auth.guard",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/roles.guard",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["handle",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["handler",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handler's",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handles",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["handling",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":879,"title":{},"body":{"index.html":{}}}],["handy",{"_index":868,"title":{},"body":{"index.html":{}}}],["hash",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashed",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashes",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":883,"title":{},"body":{"index.html":{}}}],["here",{"_index":915,"title":{},"body":{"index.html":{}}}],["http",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["httpcode",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":921,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["hyphens",{"_index":794,"title":{},"body":{"miscellaneous/functions.html":{}}}],["id",{"_index":248,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{}}}],["in.dto.ts",{"_index":567,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:13",{"_index":569,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:22",{"_index":570,"title":{},"body":{"classes/SignInDto.html":{}}}],["include",{"_index":716,"title":{},"body":{"injectables/UsersService.html":{}}}],["incoming",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":355,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["indicating",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":642,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["infrastructure",{"_index":865,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":84,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["input",{"_index":783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["install",{"_index":858,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":816,"title":{},"body":{"index.html":{}}}],["instance",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["interact",{"_index":886,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":290,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception(error",{"_index":313,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception(error.message",{"_index":306,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["invalid",{"_index":720,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["is_public_key",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":377,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isdatestring",{"_index":378,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{}}}],["isemail",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":404,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(role",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(tickettype",{"_index":405,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isglobal",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":331,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isdatestring",{"_index":359,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isenum(role",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isenum(tickettype",{"_index":400,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isnumber",{"_index":363,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{}}}],["isnotempty()@isstring",{"_index":329,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(6",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isuuid",{"_index":388,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnumber",{"_index":379,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{}}}],["isoptional",{"_index":380,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isoptional()@isboolean",{"_index":353,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isoptional()@isnumber",{"_index":374,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isoptional()@isstring",{"_index":361,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isoptional()@isuuid",{"_index":349,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["ispublic",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":332,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isuuid",{"_index":381,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{}}}],["isvalidpassword",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["job",{"_index":900,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":902,"title":{},"body":{"index.html":{}}}],["join",{"_index":913,"title":{},"body":{"index.html":{}}}],["json",{"_index":617,"title":{},"body":{"injectables/TicketsService.html":{},"miscellaneous/variables.html":{}}}],["json.stringify(a",{"_index":635,"title":{},"body":{"injectables/TicketsService.html":{}}}],["jwt",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtconstants",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":918,"title":{},"body":{"index.html":{}}}],["key",{"_index":835,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["latitude",{"_index":342,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["learn",{"_index":871,"title":{},"body":{"index.html":{}}}],["legend",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":924,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":905,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":899,"title":{},"body":{"index.html":{}}}],["list",{"_index":611,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":512,"title":{},"body":{"injectables/EventsService.html":{}}}],["location",{"_index":366,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["log",{"_index":551,"title":{},"body":{"injectables/PrismaService.html":{}}}],["logic",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["longitude",{"_index":343,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["looking",{"_index":844,"title":{},"body":{"index.html":{}}}],["loop",{"_index":896,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":788,"title":{},"body":{"miscellaneous/functions.html":{}}}],["makes",{"_index":852,"title":{},"body":{"index.html":{}}}],["manage",{"_index":681,"title":{},"body":{"controllers/UsersController.html":{}}}],["managing",{"_index":864,"title":{},"body":{"index.html":{}}}],["mark",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":786,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["mau",{"_index":848,"title":{},"body":{"index.html":{}}}],["mechanisms",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":770,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["minlength(6",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["miscellaneous",{"_index":774,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":904,"title":{},"body":{"index.html":{}}}],["mode",{"_index":821,"title":{},"body":{"index.html":{}}}],["module",{"_index":49,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":51,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/decorators/public.decorator",{"_index":679,"title":{},"body":{"controllers/UsersController.html":{}}}],["modules/categories/categories.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/events/events.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tickets/tickets.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules/users/users.service",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["more",{"_index":843,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":919,"title":{},"body":{"index.html":{}}}],["name",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":891,"title":{},"body":{"index.html":{}}}],["nest",{"_index":809,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":923,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":834,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":646,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newvalue",{"_index":475,"title":{},"body":{"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{}}}],["node.js",{"_index":801,"title":{},"body":{"index.html":{}}}],["normalizes",{"_index":782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["notfoundexception",{"_index":291,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":513,"title":{},"body":{"injectables/EventsService.html":{}}}],["number",{"_index":239,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":326,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(updateeventdto).length",{"_index":526,"title":{},"body":{"injectables/EventsService.html":{}}}],["object.keys(updateuserdto).length",{"_index":721,"title":{},"body":{"injectables/UsersService.html":{}}}],["occurs",{"_index":628,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":901,"title":{},"body":{"index.html":{}}}],["official",{"_index":849,"title":{},"body":{"index.html":{}}}],["omitting",{"_index":652,"title":{},"body":{"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["omittype",{"_index":656,"title":{},"body":{"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["omittype(createeventtickettypedto",{"_index":655,"title":{},"body":{"classes/UpdateEventTicketTypeDto.html":{}}}],["omittype(createticketdto",{"_index":659,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["omittype(createuserdto",{"_index":663,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["onmoduledestroy",{"_index":543,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":544,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":906,"title":{},"body":{"index.html":{}}}],["operation",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["operations",{"_index":596,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["optional",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateEventDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":928,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":761,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":243,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pagesize",{"_index":307,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["paginated",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pagination",{"_index":610,"title":{},"body":{"injectables/TicketsService.html":{}}}],["param",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":271,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{}}}],["parameters",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":892,"title":{},"body":{"index.html":{}}}],["partial",{"_index":639,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype",{"_index":645,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":644,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createeventdto",{"_index":650,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["pass",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":256,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":254,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["payload",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["phone",{"_index":344,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["platform",{"_index":847,"title":{},"body":{"index.html":{}}}],["please",{"_index":874,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":815,"title":{},"body":{"index.html":{}}}],["possible",{"_index":840,"title":{},"body":{"index.html":{}}}],["post",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["previousvalue",{"_index":473,"title":{},"body":{"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{}}}],["price",{"_index":376,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"injectables/EventsService.html":{}}}],["prisma",{"_index":600,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["prisma.service",{"_index":539,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":403,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":542,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclient).$connect",{"_index":554,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":64,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":281,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/TicketsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"injectables/TicketsService.html":{}}}],["production",{"_index":823,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":800,"title":{},"body":{"index.html":{}}}],["project",{"_index":812,"title":{},"body":{"index.html":{}}}],["promise",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":328,"title":{"properties.html":{}},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"properties.html":{}}}],["property",{"_index":653,"title":{},"body":{"classes/UpdateEventTicketTypeDto.html":{}}}],["provide",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["provided",{"_index":719,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["public",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@httpcode(httpstatus.ok)@post('login",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":258,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"injectables/PrismaService.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["questions",{"_index":872,"title":{},"body":{"index.html":{}}}],["read",{"_index":914,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":832,"title":{},"body":{"index.html":{}}}],["real",{"_index":887,"title":{},"body":{"index.html":{}}}],["record",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["related",{"_index":595,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["remove",{"_index":233,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":273,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":249,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removing",{"_index":784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replacing",{"_index":791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["repository",{"_index":811,"title":{},"body":{"index.html":{}}}],["req",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["request.headers.authorization?.split",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requests",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["require",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":522,"title":{},"body":{"injectables/EventsService.html":{}}}],["requiredroles",{"_index":562,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":564,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":855,"title":{},"body":{"index.html":{}}}],["reset",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":866,"title":{},"body":{"index.html":{}}}],["responses",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["responsible",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieval",{"_index":630,"title":{},"body":{"injectables/TicketsService.html":{}}}],["retrieve",{"_index":614,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["retrieves",{"_index":609,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returning",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["returns",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":746,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles_key",{"_index":560,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":197,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["root",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["route",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routes",{"_index":947,"title":{"routes.html":{}},"body":{"miscellaneous/variables.html":{},"routes.html":{}}}],["run",{"_index":817,"title":{},"body":{"index.html":{}}}],["runs",{"_index":838,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":805,"title":{},"body":{"index.html":{}}}],["secret",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["see",{"_index":643,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["select",{"_index":718,"title":{},"body":{"injectables/UsersService.html":{}}}],["server",{"_index":806,"title":{},"body":{"index.html":{}}}],["service",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["setmetadata",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":813,"title":{},"body":{"index.html":{}}}],["side",{"_index":807,"title":{},"body":{"index.html":{}}}],["signin",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(email",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindto",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":113,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signindto.password",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":568,"title":{},"body":{"classes/SignInDto.html":{}}}],["signoptions",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":857,"title":{},"body":{"index.html":{}}}],["single",{"_index":613,"title":{},"body":{"injectables/TicketsService.html":{},"controllers/UsersController.html":{}}}],["skip",{"_index":312,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["slug",{"_index":345,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventsService.html":{},"miscellaneous/functions.html":{}}}],["slug.ts",{"_index":758,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":792,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":296,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sponsors",{"_index":909,"title":{},"body":{"index.html":{}}}],["src/.../generate",{"_index":777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwtconstants.ts",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["src/constants/jwtconstants.ts",{"_index":736,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/prisma/prisma.module.ts",{"_index":538,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/database/prisma/prisma.service",{"_index":462,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["src/database/prisma/prisma.service.ts",{"_index":540,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/database/prisma/prisma.service.ts:16",{"_index":549,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/prisma/prisma.service.ts:20",{"_index":548,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/prisma/prisma.service.ts:9",{"_index":547,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/main.ts",{"_index":741,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:22",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:27",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:13",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:7",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/decorators/public.decorator.ts",{"_index":744,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/decorators/roles.decorator.ts",{"_index":745,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/sign",{"_index":566,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/auth.guard.ts",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/auth.guard.ts:14",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/modules/auth/guards/auth.guard.ts:20",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/modules/auth/guards/auth.guard.ts:45",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/modules/auth/guards/roles.guard.ts",{"_index":556,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts:10",{"_index":559,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/guards/roles.guard.ts:7",{"_index":558,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/categories/categories.controller.ts",{"_index":228,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/modules/categories/categories.controller.ts:20",{"_index":237,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.controller.ts:25",{"_index":240,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.controller.ts:30",{"_index":247,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.controller.ts:35",{"_index":255,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.controller.ts:43",{"_index":251,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.module.ts",{"_index":277,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/modules/categories/categories.service.ts",{"_index":279,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/modules/categories/categories.service.ts:12",{"_index":282,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:15",{"_index":283,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:38",{"_index":285,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:52",{"_index":286,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:71",{"_index":288,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:95",{"_index":287,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/dto/create",{"_index":323,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/modules/categories/dto/update",{"_index":636,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/modules/events/dto/create",{"_index":335,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/modules/events/dto/update",{"_index":647,"title":{},"body":{"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["src/modules/events/event",{"_index":383,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"classes/UpdateEventTicketTypeDto.html":{},"coverage.html":{}}}],["src/modules/events/events.controller.ts",{"_index":479,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/modules/events/events.controller.ts:20",{"_index":482,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:25",{"_index":483,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:30",{"_index":484,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:35",{"_index":487,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.controller.ts:40",{"_index":485,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/modules/events/events.module.ts",{"_index":499,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/modules/events/events.service.ts",{"_index":502,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/modules/events/events.service.ts:100",{"_index":509,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:13",{"_index":504,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:16",{"_index":505,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:160",{"_index":508,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:183",{"_index":514,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:67",{"_index":506,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/events/events.service.ts:81",{"_index":507,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/modules/tickets/dto/create",{"_index":395,"title":{},"body":{"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/modules/tickets/dto/update",{"_index":657,"title":{},"body":{"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["src/modules/tickets/tickets.controller.ts",{"_index":572,"title":{},"body":{"controllers/TicketsController.html":{},"coverage.html":{}}}],["src/modules/tickets/tickets.controller.ts:20",{"_index":574,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/modules/tickets/tickets.controller.ts:25",{"_index":575,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/modules/tickets/tickets.controller.ts:30",{"_index":576,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/modules/tickets/tickets.controller.ts:35",{"_index":579,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/modules/tickets/tickets.controller.ts:40",{"_index":577,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/modules/tickets/tickets.module.ts",{"_index":591,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/modules/tickets/tickets.service.ts",{"_index":594,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/modules/tickets/tickets.service.ts:116",{"_index":612,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:142",{"_index":621,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:16",{"_index":599,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:170",{"_index":619,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:193",{"_index":615,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:34",{"_index":602,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/tickets/tickets.service.ts:95",{"_index":608,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/modules/users/dto/create",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":661,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:34",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:44",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:54",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:65",{"_index":677,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:75",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":689,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:133",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:17",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:189",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:218",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:237",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:31",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:68",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:97",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/generate",{"_index":757,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":819,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":822,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":824,"title":{},"body":{"index.html":{}}}],["started",{"_index":799,"title":{"index.html":{}},"body":{}}],["starter",{"_index":810,"title":{},"body":{"index.html":{}}}],["statements",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":303,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["stay",{"_index":895,"title":{},"body":{"index.html":{}}}],["steps",{"_index":836,"title":{},"body":{"index.html":{}}}],["store",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straightforward",{"_index":853,"title":{},"body":{"index.html":{}}}],["string",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":606,"title":{},"body":{"injectables/TicketsService.html":{}}}],["successfully",{"_index":302,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":550,"title":{},"body":{"injectables/PrismaService.html":{}}}],["support",{"_index":873,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":926,"title":{},"body":{"modules.html":{}}}],["table",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":310,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["test",{"_index":827,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":830,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":829,"title":{},"body":{"index.html":{}}}],["tests",{"_index":825,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":908,"title":{},"body":{"index.html":{}}}],["this.$disconnect",{"_index":555,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(signindto.email",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoriesservice.create(createcategorydto",{"_index":266,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findall(page",{"_index":268,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findone(id",{"_index":270,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.remove(id",{"_index":274,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.update(id",{"_index":272,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.eventsservice.create(createeventdto",{"_index":490,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findall(page",{"_index":491,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.findone(id",{"_index":492,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.remove(id",{"_index":495,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.update(id",{"_index":494,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.updateeventavaliabletickets",{"_index":471,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["this.eventtickettypesservice.create(createeventtickettypedto",{"_index":439,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["this.eventtickettypesservice.findall(page",{"_index":440,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["this.eventtickettypesservice.findone(id",{"_index":441,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["this.eventtickettypesservice.remove(id",{"_index":443,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["this.eventtickettypesservice.update(id",{"_index":442,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["this.extracttokenfromheader(request",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.hashpassword",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.prismaservice.category.create",{"_index":299,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.prismaservice.category.delete",{"_index":319,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.prismaservice.category.findfirst",{"_index":294,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.prismaservice.category.findmany",{"_index":309,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.prismaservice.category.findunique",{"_index":314,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventsService.html":{}}}],["this.prismaservice.category.update",{"_index":316,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.prismaservice.event.create",{"_index":523,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.prismaservice.event.delete",{"_index":533,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.prismaservice.event.findmany",{"_index":525,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.prismaservice.event.findunique",{"_index":463,"title":{},"body":{"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{}}}],["this.prismaservice.event.update",{"_index":532,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.prismaservice.eventtickettype.create",{"_index":465,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["this.prismaservice.eventtickettype.delete",{"_index":477,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["this.prismaservice.eventtickettype.findmany",{"_index":467,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["this.prismaservice.eventtickettype.findunique",{"_index":469,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["this.prismaservice.eventtickettype.update",{"_index":476,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["this.prismaservice.ticket.delete",{"_index":633,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.prismaservice.ticket.findmany",{"_index":634,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.prismaservice.ticket.findunique",{"_index":631,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.prismaservice.ticket.update",{"_index":632,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.prismaservice.user.create",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.delete",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":715,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":625,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":563,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.ticketsservice.create(createticketdto",{"_index":584,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.findall(page",{"_index":585,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.findone(id",{"_index":586,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.remove(id",{"_index":588,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.update(id",{"_index":587,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":682,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(page",{"_index":683,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":684,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(email",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.remove(id",{"_index":686,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":685,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":624,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":384,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket's",{"_index":658,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["ticket.dto",{"_index":582,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts",{"_index":396,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:14",{"_index":402,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:22",{"_index":399,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:30",{"_index":401,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticketcount",{"_index":346,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{}}}],["ticketdefaultprice",{"_index":347,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["tickets",{"_index":357,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["tickets.controller",{"_index":592,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service",{"_index":581,"title":{},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{}}}],["ticketscontroller",{"_index":571,"title":{"controllers/TicketsController.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"coverage.html":{}}}],["ticketsmodule",{"_index":65,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketsservice",{"_index":580,"title":{"injectables/TicketsService.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["tickettype",{"_index":397,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["time",{"_index":888,"title":{},"body":{"index.html":{}}}],["token",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":916,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":325,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["trimming",{"_index":789,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":922,"title":{},"body":{"index.html":{}}}],["type",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type's",{"_index":654,"title":{},"body":{"classes/UpdateEventTicketTypeDto.html":{}}}],["type.dto",{"_index":437,"title":{},"body":{"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"classes/UpdateEventTicketTypeDto.html":{}}}],["type.dto.ts",{"_index":386,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"coverage.html":{}}}],["type.dto.ts:13",{"_index":389,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{}}}],["type.dto.ts:21",{"_index":391,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{}}}],["type.dto.ts:29",{"_index":392,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{}}}],["type.dto.ts:37",{"_index":393,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{}}}],["types",{"_index":427,"title":{},"body":{"controllers/EventTicketTypesController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types.controller",{"_index":449,"title":{},"body":{"modules/EventTicketTypesModule.html":{}}}],["types.controller.ts",{"_index":426,"title":{},"body":{"controllers/EventTicketTypesController.html":{},"coverage.html":{}}}],["types.controller.ts:22",{"_index":429,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["types.controller.ts:27",{"_index":430,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["types.controller.ts:32",{"_index":431,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["types.controller.ts:37",{"_index":434,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["types.controller.ts:45",{"_index":432,"title":{},"body":{"controllers/EventTicketTypesController.html":{}}}],["types.module",{"_index":501,"title":{},"body":{"modules/EventsModule.html":{}}}],["types.module.ts",{"_index":448,"title":{},"body":{"modules/EventTicketTypesModule.html":{}}}],["types.service",{"_index":436,"title":{},"body":{"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{}}}],["types.service.ts",{"_index":451,"title":{},"body":{"injectables/EventTicketTypesService.html":{},"coverage.html":{}}}],["types.service.ts:116",{"_index":457,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["types.service.ts:140",{"_index":460,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["types.service.ts:15",{"_index":453,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["types.service.ts:21",{"_index":454,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["types.service.ts:45",{"_index":455,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["types.service.ts:60",{"_index":456,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["types.service.ts:79",{"_index":458,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["types/dto/create",{"_index":385,"title":{},"body":{"classes/CreateEventTicketTypeDto.html":{},"coverage.html":{}}}],["types/dto/update",{"_index":651,"title":{},"body":{"classes/UpdateEventTicketTypeDto.html":{},"coverage.html":{}}}],["types/event",{"_index":425,"title":{},"body":{"controllers/EventTicketTypesController.html":{},"modules/EventTicketTypesModule.html":{},"injectables/EventTicketTypesService.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["typescript",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["unauthorized",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorizedexception",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":826,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":284,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":935,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":234,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":493,"title":{},"body":{"controllers/EventsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":252,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatecategorydto",{"_index":253,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updated",{"_index":317,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EventTicketTypesService.html":{},"injectables/EventsService.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateeventavaliabletickets",{"_index":503,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventavaliabletickets(eventid",{"_index":510,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventdto",{"_index":486,"title":{"classes/UpdateEventDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["updateeventdto.categoryid",{"_index":527,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventdto.name",{"_index":528,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventdto.slug",{"_index":531,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventtickettypeavaliabletickets",{"_index":452,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["updateeventtickettypeavaliabletickets(eventtickettypeid",{"_index":459,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["updateeventtickettypedto",{"_index":433,"title":{"classes/UpdateEventTicketTypeDto.html":{}},"body":{"controllers/EventTicketTypesController.html":{},"injectables/EventTicketTypesService.html":{},"classes/UpdateEventTicketTypeDto.html":{},"coverage.html":{}}}],["updateeventtickettypedto.ticketcount",{"_index":470,"title":{},"body":{"injectables/EventTicketTypesService.html":{}}}],["updates",{"_index":622,"title":{},"body":{"injectables/TicketsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["updateticketdto",{"_index":578,"title":{"classes/UpdateTicketDto.html":{}},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":660,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.password",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{}}}],["updating",{"_index":638,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateEventTicketTypeDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDto.html":{}}}],["url",{"_index":779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["use",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useclass",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateEventDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user's",{"_index":662,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":664,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:53",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.password",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.roles?.includes(role",{"_index":565,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.user.birthdate",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.user.email",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.user.id",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.user.name",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.user.password",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":398,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{}}}],["users",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":690,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":678,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["userscontroller",{"_index":665,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":66,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":190,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":889,"title":{},"body":{"index.html":{}}}],["utils/generate",{"_index":516,"title":{},"body":{"injectables/EventsService.html":{}}}],["validator",{"_index":333,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateEventTicketTypeDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":242,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EventTicketTypesController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":936,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":933,"title":{},"body":{"properties.html":{}}}],["video",{"_index":881,"title":{},"body":{"index.html":{}}}],["visit",{"_index":870,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":884,"title":{},"body":{"index.html":{}}}],["watch",{"_index":820,"title":{},"body":{"index.html":{}}}],["web",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["website",{"_index":920,"title":{},"body":{"index.html":{}}}],["whitespace",{"_index":790,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wide",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["working",{"_index":869,"title":{},"body":{"index.html":{}}}],["world",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":898,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":912,"title":{},"body":{"index.html":{}}}],["you're",{"_index":831,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EventTicketTypesModule.html":{},"modules/EventsModule.html":{},"modules/PrismaModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                AppController is responsible for handling incoming HTTP requests and returning responses.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:20\n                        \n                    \n\n\n            \n                \n                        Handles GET requests to the root endpoint and returns a greeting message.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A greeting message string.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * AppController is responsible for handling incoming HTTP requests and returning responses.\n */\n@Controller()\nexport class AppController {\n  /**\n   * Constructs an instance of AppController.\n   * @param appService - The service used to handle business logic.\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Handles GET requests to the root endpoint and returns a greeting message.\n   * @returns A greeting message string.\n   */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaModule } from '@database/prisma/prisma.module';\nimport { UsersModule } from '@modules/users/users.module';\nimport { EventsModule } from '@modules/events/events.module';\nimport { CategoriesModule } from '@modules/categories/categories.module';\nimport { AuthModule } from '@modules/auth/auth.module';\nimport { TicketsModule } from '@modules/tickets/tickets.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    PrismaModule,\n    UsersModule,\n    EventsModule,\n    CategoriesModule,\n    TicketsModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that provides application-wide functionalities.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:12\n                        \n                    \n\n\n            \n                \n                        Returns a greeting message.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A string containing 'Hello World!'\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Service that provides application-wide functionalities.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Returns a greeting message.\n   * @returns A string containing 'Hello World!'\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: Record) {\n    return this.authService.signIn(signInDto.email, signInDto.password);\n  }\n\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/auth.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/auth.guard.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from '../../../constants/jwtConstants';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '@modules/users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { jwtConstants } from '../../constants/jwtConstants';\nimport { UsersService } from '@modules/users/users.service';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthGuard } from './guards/auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  providers: [\n    AuthService,\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '@modules/users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async signIn(email: string, pass: string): Promise {\n    const user = await this.usersService.findOneByEmail(email);\n\n    const isValidPassword = await bcrypt.compare(pass, user?.user.password);\n\n    if (!isValidPassword) {\n      throw new UnauthorizedException();\n    }\n    const payload = {\n      sub: user.user.id,\n      name: user.user.name,\n      email: user.user.email,\n      birthDate: user.user.birthDate,\n    };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/categories/categories.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/categories/categories.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/categories/categories.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/categories/categories.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/categories/categories.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('categories')\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  @Post()\n  create(@Body() createCategoryDto: CreateCategoryDto) {\n    return this.categoriesService.create(createCategoryDto);\n  }\n\n  @Get()\n  findAll(@Query('page') page: number = 1) {\n    return this.categoriesService.findAll(page);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.categoriesService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ) {\n    return this.categoriesService.update(id, updateCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.categoriesService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\n\n@Module({\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/categories/categories.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/categories/categories.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/categories/categories.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/categories/categories.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/categories/categories.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/categories/categories.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { PrismaService } from '@database/prisma/prisma.service';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    try {\n      const category = await this.prismaService.category.findFirst({\n        where: { name: createCategoryDto.name },\n      });\n\n      if (category) {\n        throw new ConflictException(\n          'Category with the specified name already exists',\n          'Category already exists',\n        );\n      }\n\n      await this.prismaService.category.create({\n        data: createCategoryDto,\n      });\n\n      return { message: 'Category created successfully', status: 201 };\n    } catch (error) {\n      throw new InternalServerErrorException(error.message);\n    }\n  }\n\n  async findAll(page: number) {\n    try {\n      const pageSize = 25;\n      const categories = await this.prismaService.category.findMany({\n        take: page === 0 ? undefined : pageSize,\n        skip: page > 0 ? (page - 1) * pageSize : 0,\n      });\n\n      return { categories };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async findOne(id: string) {\n    try {\n      const category = await this.prismaService.category.findUnique({\n        where: { id },\n      });\n\n      if (!category) {\n        throw new NotFoundException(\n          'Category with the specified ID was not found',\n          'Category not found',\n        );\n      }\n\n      return { category };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async update(id: string, updateCategoryDto: UpdateCategoryDto) {\n    try {\n      const category = await this.prismaService.category.findUnique({\n        where: { id },\n      });\n\n      if (!category) {\n        throw new NotFoundException(\n          'Category with the specified ID was not found',\n          'Category not found',\n        );\n      }\n\n      await this.prismaService.category.update({\n        where: { id },\n        data: updateCategoryDto,\n      });\n\n      return { message: 'Category updated successfully', status: 200 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const category = await this.prismaService.category.findUnique({\n        where: { id },\n      });\n\n      if (!category) {\n        throw new NotFoundException(\n          'Category with the specified ID was not found',\n          'Category not found',\n        );\n      }\n\n      await this.prismaService.category.delete({\n        where: { id },\n      });\n\n      return { message: 'Category deleted successfully', status: 204 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a category.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/dto/create-category.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the category.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * Data Transfer Object for creating a category.\n */\nexport class CreateCategoryDto {\n  /**\n   * The name of the category.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/dto/create-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating an event.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                customTickets\n                            \n                            \n                                    \n                                    \n                                date\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                latitude\n                            \n                            \n                                    \n                                    \n                                longitude\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                ticketCount\n                            \n                            \n                                    \n                                    \n                                ticketDefaultPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:46\n                        \n                    \n\n            \n                \n                    The address of the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:112\n                        \n                    \n\n            \n                \n                    The ID of the category to which the event belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        customTickets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:94\n                        \n                    \n\n            \n                \n                    Indicates if custom tickets are allowed for the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:70\n                        \n                    \n\n            \n                \n                    The date of the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:38\n                        \n                    \n\n            \n                \n                    The description of the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:54\n                        \n                    \n\n            \n                \n                    The latitude coordinate of the event location.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:62\n                        \n                    \n\n            \n                \n                    The longitude coordinate of the event location.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:21\n                        \n                    \n\n            \n                \n                    The name of the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:78\n                        \n                    \n\n            \n                \n                    The contact phone number for the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:29\n                        \n                    \n\n            \n                \n                    The slug of the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ticketCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:85\n                        \n                    \n\n            \n                \n                    The number of tickets available for the event.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        ticketDefaultPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/dto/create-event.dto.ts:103\n                        \n                    \n\n            \n                \n                    The default price for tickets if custom tickets are not used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDateString,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\n/**\n * Data Transfer Object for creating an event.\n */\nexport class CreateEventDto {\n  /**\n   * The name of the event.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  /**\n   * The slug of the event.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  slug: string;\n\n  /**\n   * The description of the event.\n   * @type {string}\n   * @optional\n   */\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  /**\n   * The address of the event.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  /**\n   * The latitude coordinate of the event location.\n   * @type {number}\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  latitude: number;\n\n  /**\n   * The longitude coordinate of the event location.\n   * @type {number}\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  longitude: number;\n\n  /**\n   * The date of the event.\n   * @type {Date}\n   */\n  @IsNotEmpty()\n  @IsDateString()\n  date: Date;\n\n  /**\n   * The contact phone number for the event.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  phone: string;\n\n  /**\n   * The number of tickets available for the event.\n   * @type {number}\n   */\n  @IsNotEmpty()\n  ticketCount: number;\n\n  /**\n   * Indicates if custom tickets are allowed for the event.\n   * @type {boolean}\n   * @optional\n   */\n  @IsOptional()\n  @IsBoolean()\n  customTickets: boolean;\n\n  /**\n   * The default price for tickets if custom tickets are not used.\n   * @type {number}\n   * @optional\n   */\n  @IsOptional()\n  @IsNumber()\n  ticketDefaultPrice: number;\n\n  /**\n   * The ID of the category to which the event belongs.\n   * @type {string}\n   * @optional\n   */\n  @IsOptional()\n  @IsUUID()\n  categoryId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventTicketTypeDto.html":{"url":"classes/CreateEventTicketTypeDto.html","title":"class - CreateEventTicketTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventTicketTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-ticket-types/dto/create-event-ticket-type.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating an event ticket type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                eventId\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                ticketCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/event-ticket-types/dto/create-event-ticket-type.dto.ts:13\n                        \n                    \n\n            \n                \n                    The ID of the event for which the ticket type is being created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/event-ticket-types/dto/create-event-ticket-type.dto.ts:21\n                        \n                    \n\n            \n                \n                    The name of the ticket type.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/event-ticket-types/dto/create-event-ticket-type.dto.ts:29\n                        \n                    \n\n            \n                \n                    The price of the ticket type.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        ticketCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/events/event-ticket-types/dto/create-event-ticket-type.dto.ts:37\n                        \n                    \n\n            \n                \n                    The number of tickets available for this ticket type.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber, IsString, IsUUID } from 'class-validator';\n\n/**\n * Data Transfer Object for creating an event ticket type.\n */\nexport class CreateEventTicketTypeDto {\n  /**\n   * The ID of the event for which the ticket type is being created.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsUUID()\n  eventId: string;\n\n  /**\n   * The name of the ticket type.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  /**\n   * The price of the ticket type.\n   * @type {number}\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  price: number;\n\n  /**\n   * The number of tickets available for this ticket type.\n   * @type {number}\n   */\n  @IsNotEmpty()\n  @IsNumber()\n  ticketCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/dto/create-ticket.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a ticket.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                eventId\n                            \n                            \n                                    \n                                    \n                                ticketType\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/dto/create-ticket.dto.ts:22\n                        \n                    \n\n            \n                \n                    The ID of the event for which the ticket is being created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        ticketType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TicketType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(TicketType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/dto/create-ticket.dto.ts:30\n                        \n                    \n\n            \n                \n                    The type of the ticket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tickets/dto/create-ticket.dto.ts:14\n                        \n                    \n\n            \n                \n                    The ID of the user creating the ticket.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TicketType } from '@prisma/client';\nimport { IsEnum, IsNotEmpty, IsUUID } from 'class-validator';\n\n/**\n * Data Transfer Object for creating a ticket.\n */\nexport class CreateTicketDto {\n  /**\n   * The ID of the user creating the ticket.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsUUID()\n  userId: string;\n\n  /**\n   * The ID of the event for which the ticket is being created.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsUUID()\n  eventId: string;\n\n  /**\n   * The type of the ticket.\n   * @type {TicketType}\n   */\n  @IsNotEmpty()\n  @IsEnum(TicketType)\n  ticketType: TicketType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    The birth date of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    The name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:37\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    The role of the user.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { Role } from '@prisma/client';\n/**\n * Data Transfer Object for creating a user.\n */\nexport class CreateUserDto {\n  /**\n   * The name of the user.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  /**\n   * The email of the user.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  /**\n   * The password of the user.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  /**\n   * The birth date of the user.\n   * @type {Date}\n   */\n  @IsNotEmpty()\n  @IsDateString()\n  birthDate: Date;\n\n  /**\n   * The role of the user.\n   * @type {Role}\n   */\n  @IsNotEmpty()\n  @IsEnum(Role)\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventTicketTypesController.html":{"url":"controllers/EventTicketTypesController.html","title":"controller - EventTicketTypesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventTicketTypesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-ticket-types/event-ticket-types.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                event-ticket-types\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventTicketTypeDto: CreateEventTicketTypeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventTicketTypeDto\n                                            \n                                                            CreateEventTicketTypeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEventTicketTypeDto: UpdateEventTicketTypeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEventTicketTypeDto\n                                            \n                                                            UpdateEventTicketTypeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { EventTicketTypesService } from './event-ticket-types.service';\nimport { CreateEventTicketTypeDto } from './dto/create-event-ticket-type.dto';\nimport { UpdateEventTicketTypeDto } from './dto/update-event-ticket-type.dto';\n\n@Controller('event-ticket-types')\nexport class EventTicketTypesController {\n  constructor(\n    private readonly eventTicketTypesService: EventTicketTypesService,\n  ) {}\n\n  @Post()\n  create(@Body() createEventTicketTypeDto: CreateEventTicketTypeDto) {\n    return this.eventTicketTypesService.create(createEventTicketTypeDto);\n  }\n\n  @Get()\n  findAll(@Query('page') page: number = 1) {\n    return this.eventTicketTypesService.findAll(page);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.eventTicketTypesService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateEventTicketTypeDto: UpdateEventTicketTypeDto,\n  ) {\n    return this.eventTicketTypesService.update(id, updateEventTicketTypeDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.eventTicketTypesService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventTicketTypesModule.html":{"url":"modules/EventTicketTypesModule.html","title":"module - EventTicketTypesModule","body":"\n                   \n\n\n\n\n    Modules\n    EventTicketTypesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventTicketTypesModule\n\n\n\ncluster_EventTicketTypesModule_providers\n\n\n\n\nEventTicketTypesService\n\nEventTicketTypesService\n\n\n\nEventTicketTypesModule\n\nEventTicketTypesModule\n\nEventTicketTypesModule -->\n\nEventTicketTypesService->EventTicketTypesModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventTicketTypesModule -->\n\nEventsService->EventTicketTypesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/events/event-ticket-types/event-ticket-types.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventTicketTypesService\n                        \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventTicketTypesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventTicketTypesService } from './event-ticket-types.service';\nimport { EventTicketTypesController } from './event-ticket-types.controller';\nimport { EventsService } from '../events.service';\n\n@Module({\n  controllers: [EventTicketTypesController],\n  providers: [EventTicketTypesService, EventsService],\n})\nexport class EventTicketTypesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventTicketTypesService.html":{"url":"injectables/EventTicketTypesService.html","title":"injectable - EventTicketTypesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventTicketTypesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-ticket-types/event-ticket-types.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateEventTicketTypeAvaliableTickets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, eventsService: EventsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/event-ticket-types/event-ticket-types.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventTicketTypeDto: CreateEventTicketTypeDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventTicketTypeDto\n                                            \n                                                            CreateEventTicketTypeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEventTicketTypeDto: UpdateEventTicketTypeDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEventTicketTypeDto\n                                            \n                                                            UpdateEventTicketTypeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEventTicketTypeAvaliableTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEventTicketTypeAvaliableTickets(eventTicketTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/event-ticket-types/event-ticket-types.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventTicketTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateEventTicketTypeDto } from './dto/create-event-ticket-type.dto';\nimport { UpdateEventTicketTypeDto } from './dto/update-event-ticket-type.dto';\nimport { PrismaService } from '@src/database/prisma/prisma.service';\nimport { EventsService } from '../events.service';\n\n@Injectable()\nexport class EventTicketTypesService {\n  constructor(\n    private readonly prismaService: PrismaService,\n    private eventsService: EventsService,\n  ) {}\n\n  async create(createEventTicketTypeDto: CreateEventTicketTypeDto) {\n    const event = await this.prismaService.event.findUnique({\n      where: { id: createEventTicketTypeDto.eventId },\n    });\n\n    if (!event) {\n      throw new NotFoundException(\n        'Event with the specified ID was not found',\n        'Event not found',\n      );\n    }\n\n    await this.prismaService.eventTicketType.create({\n      data: {\n        ...createEventTicketTypeDto,\n      },\n    });\n\n    return {\n      message: 'Custom event ticket type created successfully.',\n      status: 201,\n    };\n  }\n\n  async findAll(page: number) {\n    try {\n      const pageSize = 25;\n      const eventTicketTypes =\n        await this.prismaService.eventTicketType.findMany({\n          take: page === 0 ? undefined : pageSize,\n          skip: page > 0 ? (page - 1) * pageSize : 0,\n        });\n\n      return { eventTicketTypes };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async findOne(id: string) {\n    try {\n      const eventTicketType =\n        await this.prismaService.eventTicketType.findUnique({\n          where: { id },\n        });\n\n      if (!eventTicketType) {\n        throw new NotFoundException(\n          'Custom event ticket type with the specified ID was not found',\n          'Custom event ticket type not found',\n        );\n      }\n\n      return { eventTicketType };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n  async update(id: string, updateEventTicketTypeDto: UpdateEventTicketTypeDto) {\n    const eventTicketType = await this.prismaService.eventTicketType.findUnique(\n      {\n        where: { id },\n      },\n    );\n\n    if (!eventTicketType) {\n      throw new NotFoundException(\n        'Custom event ticket type with the specified ID was not found',\n        'Custom event ticket type not found',\n      );\n    }\n\n    if (updateEventTicketTypeDto.ticketCount) {\n      await this.eventsService.updateEventAvaliableTickets(\n        eventTicketType.eventId,\n        {\n          previousValue: eventTicketType.ticketCount,\n          newValue: updateEventTicketTypeDto.ticketCount,\n        },\n      );\n    }\n\n    await this.prismaService.eventTicketType.update({\n      where: { id },\n      data: {\n        ...updateEventTicketTypeDto,\n      },\n    });\n\n    return {\n      message: 'Custom event ticket type updated successfully.',\n      status: 200,\n    };\n  }\n\n  async remove(id: string) {\n    const eventTicketType = await this.prismaService.eventTicketType.findUnique(\n      {\n        where: { id },\n      },\n    );\n\n    if (!eventTicketType) {\n      throw new NotFoundException(\n        'Custom event ticket type with the specified ID was not found',\n        'Custom event ticket type not found',\n      );\n    }\n\n    await this.prismaService.eventTicketType.delete({\n      where: { id },\n    });\n\n    return {\n      message: 'Custom Custom event ticket type deleted successfully.',\n      status: 204,\n    };\n  }\n\n  async updateEventTicketTypeAvaliableTickets(eventTicketTypeId: string) {\n    const eventTicketType = await this.prismaService.eventTicketType.findUnique(\n      {\n        where: { id: eventTicketTypeId },\n      },\n    );\n\n    if (!eventTicketType) {\n      throw new NotFoundException(\n        'Custom event ticket type with the specified ID was not found',\n        'Custom event ticket type not found',\n      );\n    }\n\n    if (eventTicketType.ticketCount \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEventDto: UpdateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/events/events.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEventDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { EventsService } from './events.service';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\n\n@Controller('events')\nexport class EventsController {\n  constructor(private readonly eventsService: EventsService) {}\n\n  @Post()\n  create(@Body() createEventDto: CreateEventDto) {\n    return this.eventsService.create(createEventDto);\n  }\n\n  @Get()\n  findAll(@Query('page') page: number = 1) {\n    return this.eventsService.findAll(page);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.eventsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateEventDto: UpdateEventDto) {\n    return this.eventsService.update(id, updateEventDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.eventsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_imports\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nEventTicketTypesModule\n\nEventTicketTypesModule\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nEventTicketTypesModule->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EventTicketTypesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventsService } from './events.service';\nimport { EventsController } from './events.controller';\nimport { EventTicketTypesModule } from './event-ticket-types/event-ticket-types.module';\n\n@Module({\n  controllers: [EventsController],\n  providers: [EventsService],\n  imports: [EventTicketTypesModule],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/events.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateEventAvaliableTickets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/events/events.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEventDto: CreateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEventDto: UpdateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEventDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEventAvaliableTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEventAvaliableTickets(eventId: string, customEventTicket: literal type | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/events/events.service.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                customEventTicket\n                                            \n                                                        literal type | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { PrismaService } from '@database/prisma/prisma.service';\nimport generateSlug from '@utils/generate-slug';\n\n@Injectable()\nexport class EventsService {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  async create(createEventDto: CreateEventDto) {\n    try {\n      const slug = generateSlug(createEventDto.name);\n      createEventDto.slug = slug;\n\n      const event = await this.prismaService.event.findUnique({\n        where: { slug: createEventDto.slug },\n      });\n\n      if (event) {\n        throw new ConflictException(\n          'Event with the specified slug already exists',\n          'Event already exists',\n        );\n      }\n\n      if (createEventDto.categoryId) {\n        const category = await this.prismaService.category.findUnique({\n          where: { id: createEventDto.categoryId },\n        });\n\n        if (!category) {\n          throw new NotFoundException(\n            'Category with the specified ID was not found',\n            'Category not found',\n          );\n        }\n      }\n\n      if (!createEventDto.customTickets) {\n        if (!createEventDto.ticketDefaultPrice) {\n          throw new ConflictException(\n            'Ticket default price is required',\n            'Ticket default price required',\n          );\n        }\n      }\n\n      await this.prismaService.event.create({\n        data: {\n          ...createEventDto,\n          date: new Date(createEventDto.date),\n        },\n      });\n\n      return { message: 'Event created successfully', status: 201 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async findAll(page: number) {\n    try {\n      const pageSize = 25;\n      const events = await this.prismaService.event.findMany({\n        take: page === 0 ? undefined : pageSize,\n        skip: page > 0 ? (page - 1) * pageSize : 0,\n      });\n\n      return { events };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async findOne(id: string) {\n    try {\n      const event = await this.prismaService.event.findUnique({\n        where: { id },\n      });\n\n      if (!event) {\n        throw new NotFoundException(\n          'Event with the specified ID was not found',\n          'Event not found',\n        );\n      }\n\n      return { event };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async update(id: string, updateEventDto: UpdateEventDto) {\n    try {\n      if (!Object.keys(updateEventDto).length) {\n        return { message: 'No data to update', status: 200 };\n      }\n\n      const event = await this.prismaService.event.findUnique({\n        where: { id },\n      });\n\n      if (!event) {\n        throw new NotFoundException(\n          'Event with the specified ID was not found',\n          'Event not found',\n        );\n      }\n\n      if (updateEventDto.categoryId) {\n        const category = await this.prismaService.category.findUnique({\n          where: { id: updateEventDto.categoryId },\n        });\n\n        if (!category) {\n          throw new NotFoundException(\n            'Category with the specified ID was not found',\n            'Category not found',\n          );\n        }\n      }\n\n      if (updateEventDto.name && updateEventDto.name !== event.name) {\n        const slug = generateSlug(updateEventDto.name);\n\n        const event = await this.prismaService.event.findUnique({\n          where: { slug },\n        });\n\n        if (event) {\n          throw new ConflictException(\n            'Event with the specified slug already exists',\n            'Event already exists',\n          );\n        }\n\n        updateEventDto.slug = slug;\n      }\n\n      await this.prismaService.event.update({\n        where: { id },\n        data: {\n          ...updateEventDto,\n        },\n      });\n\n      return { message: 'Event updated successfully', status: 200 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const event = await this.prismaService.event.findUnique({\n        where: { id },\n      });\n\n      if (!event) {\n        throw new NotFoundException(\n          'Event with the specified ID was not found',\n          'Event not found',\n        );\n      }\n\n      await this.prismaService.event.delete({\n        where: { id },\n      });\n\n      return { message: 'Event deleted successfully', status: 204 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  async updateEventAvaliableTickets(\n    eventId: string,\n    customEventTicket: {\n      previousValue: number;\n      newValue: number;\n    } | null = null,\n  ) {\n    const event = await this.prismaService.event.findUnique({\n      where: { id: eventId },\n    });\n\n    if (!event) {\n      throw new NotFoundException(\n        'Event with the specified ID was not found',\n        'Event not found',\n      );\n    }\n\n    if (event.ticketCount \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/database/prisma/prisma.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/prisma/prisma.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/prisma/prisma.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor(private configService: ConfigService) {\n    super({\n      log: configService.get('NODE_ENV') === 'dev' ? ['query'] : [],\n    });\n  }\n\n  async onModuleInit() {\n    await (this as PrismaClient).$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/roles.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '@prisma/client';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/sign-in.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for signing in.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/sign-in.dto.ts:13\n                        \n                    \n\n            \n                \n                    The email of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/sign-in.dto.ts:22\n                        \n                    \n\n            \n                \n                    The password of the user.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\n/**\n * Data Transfer Object for signing in.\n */\nexport class SignInDto {\n  /**\n   * The email of the user.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  /**\n   * The password of the user.\n   * @type {string}\n   */\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketsController.html":{"url":"controllers/TicketsController.html","title":"controller - TicketsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/tickets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tickets\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTicketDto: CreateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTicketDto\n                                            \n                                                            CreateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTicketDto: UpdateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTicketDto\n                                            \n                                                            UpdateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { TicketsService } from './tickets.service';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\n\n@Controller('tickets')\nexport class TicketsController {\n  constructor(private readonly ticketsService: TicketsService) {}\n\n  @Post()\n  create(@Body() createTicketDto: CreateTicketDto) {\n    return this.ticketsService.create(createTicketDto);\n  }\n\n  @Get()\n  findAll(@Query('page') page: number = 1) {\n    return this.ticketsService.findAll(page);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.ticketsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTicketDto: UpdateTicketDto) {\n    return this.ticketsService.update(id, updateTicketDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.ticketsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_providers\n\n\n\n\nEventsService\n\nEventsService\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nEventsService->TicketsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tickets/tickets.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsService\n                        \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TicketsService } from './tickets.service';\nimport { TicketsController } from './tickets.controller';\nimport { EventsService } from '../events/events.service';\n\n@Module({\n  controllers: [TicketsController],\n  providers: [TicketsService, EventsService],\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/tickets.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling ticket-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                generateTicket\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, eventService: EventsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tickets/tickets.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the TicketsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Prisma service for database operations.\n\n\n                                                        \n                                                \n                                                \n                                                        eventService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Events service for event-related operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTicketDto: CreateTicketDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Creates a new ticket.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTicketDto\n                                            \n                                                            CreateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing ticket creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A success message and status code.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Retrieves all tickets with pagination.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the list of tickets.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Retrieves a single ticket by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the ticket details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTicket()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:193\n                        \n                    \n\n\n            \n                \n                        Generates a list of all tickets in JSON format.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A JSON string containing all tickets.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:170\n                        \n                    \n\n\n            \n                \n                        Deletes a ticket by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A success message and status code.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTicketDto: UpdateTicketDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tickets/tickets.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Updates an existing ticket.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the ticket to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTicketDto\n                                            \n                                                            UpdateTicketDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing updated ticket details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A success message and status code.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { PrismaService } from '@database/prisma/prisma.service';\nimport { EventsService } from '../events/events.service';\n\n/**\n * Service responsible for handling ticket-related operations.\n */\n@Injectable()\nexport class TicketsService {\n  /**\n   * Constructs a new instance of the TicketsService.\n   * @param prismaService - The Prisma service for database operations.\n   * @param eventService - The Events service for event-related operations.\n   */\n  constructor(\n    private readonly prismaService: PrismaService,\n    private eventService: EventsService,\n  ) {}\n\n  /**\n   * Creates a new ticket.\n   * @param createTicketDto - The data transfer object containing ticket creation details.\n   * @returns A success message and status code.\n   * @throws NotFoundException if the user or event is not found.\n   * @throws ConflictException if no tickets are available for the event.\n   */\n  async create(createTicketDto: CreateTicketDto) {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: createTicketDto.userId,\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException(\n        'User with the specified ID was not found',\n        'User not found',\n      );\n    }\n\n    const event = await this.prismaService.event.findUnique({\n      where: {\n        id: createTicketDto.eventId,\n      },\n    });\n\n    if (!event) {\n      throw new NotFoundException(\n        'Event with the specified ID was not found',\n        'Event not found',\n      );\n    }\n\n    if (event.ticketCount  0 ? (page - 1) * pageSize : 0,\n      });\n\n      return { tickets };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Retrieves a single ticket by its ID.\n   * @param id - The ID of the ticket to retrieve.\n   * @returns An object containing the ticket details.\n   * @throws NotFoundException if the ticket is not found.\n   * @throws InternalServerErrorException if an error occurs during retrieval.\n   */\n  async findOne(id: string) {\n    try {\n      const ticket = await this.prismaService.ticket.findUnique({\n        where: { id },\n      });\n\n      if (!ticket) {\n        throw new NotFoundException(\n          'Ticket with the specified ID was not found',\n          'Ticket not found',\n        );\n      }\n\n      return { ticket };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Updates an existing ticket.\n   * @param id - The ID of the ticket to update.\n   * @param updateTicketDto - The data transfer object containing updated ticket details.\n   * @returns A success message and status code.\n   * @throws NotFoundException if the ticket is not found.\n   */\n  async update(id: string, updateTicketDto: UpdateTicketDto) {\n    const ticket = await this.prismaService.ticket.findUnique({\n      where: { id },\n    });\n\n    if (!ticket) {\n      throw new NotFoundException(\n        'Ticket with the specified ID was not found',\n        'Ticket not found',\n      );\n    }\n\n    await this.prismaService.ticket.update({\n      where: { id },\n      data: {\n        ...updateTicketDto,\n      },\n    });\n\n    return { message: 'Ticket updates successfully.', status: 200 };\n  }\n\n  /**\n   * Deletes a ticket by its ID.\n   * @param id - The ID of the ticket to delete.\n   * @returns A success message and status code.\n   * @throws NotFoundException if the ticket is not found.\n   */\n  async remove(id: string) {\n    const ticket = await this.prismaService.ticket.findUnique({\n      where: { id },\n    });\n\n    if (!ticket) {\n      throw new NotFoundException(\n        'Ticket with the specified ID was not found',\n        'Ticket not found',\n      );\n    }\n\n    await this.prismaService.ticket.delete({\n      where: { id },\n    });\n\n    return { message: 'Ticket deleted successfully.', status: 204 };\n  }\n\n  /**\n   * Generates a list of all tickets in JSON format.\n   * @returns A JSON string containing all tickets.\n   */\n  async generateTicket(): Promise {\n    const a = await this.prismaService.ticket.findMany();\n    return JSON.stringify(a);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a category.\nThis class extends a partial type of CreateCategoryDto.\nIt allows for partial updates to a category's information.\nSee CreateCategoryDto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCategoryDto } from './create-category.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a category.\n *\n * This class extends a partial type of CreateCategoryDto.\n * It allows for partial updates to a category's information.\n *\n * @extends PartialType\n * @see CreateCategoryDto\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDto.html":{"url":"classes/UpdateEventDto.html","title":"class - UpdateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/dto/update-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating an event.\nThis class extends a partial type of CreateEventDto, allowing for partial updates to an event's information.\nSee CreateEventDto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateEventDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateEventDto } from './create-event.dto';\n\n/**\n * Data Transfer Object (DTO) for updating an event.\n *\n * This class extends a partial type of CreateEventDto, allowing for partial updates to an event's information.\n *\n * @extends PartialType\n * @see CreateEventDto\n */\nexport class UpdateEventDto extends PartialType(CreateEventDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventTicketTypeDto.html":{"url":"classes/UpdateEventTicketTypeDto.html","title":"class - UpdateEventTicketTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventTicketTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/events/event-ticket-types/dto/update-event-ticket-type.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating an event ticket type.\nThis class extends a partial type of CreateEventTicketTypeDto, omitting the 'eventId' property.\nIt allows for partial updates to an event ticket type's information.\nSee CreateEventTicketTypeDto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateEventTicketTypeDto, ['eventId'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateEventTicketTypeDto } from './create-event-ticket-type.dto';\n\n/**\n * Data Transfer Object (DTO) for updating an event ticket type.\n *\n * This class extends a partial type of CreateEventTicketTypeDto, omitting the 'eventId' property.\n * It allows for partial updates to an event ticket type's information.\n *\n * @extends PartialType\n * @see CreateEventTicketTypeDto\n */\nexport class UpdateEventTicketTypeDto extends PartialType(\n  OmitType(CreateEventTicketTypeDto, ['eventId'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTicketDto.html":{"url":"classes/UpdateTicketDto.html","title":"class - UpdateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tickets/dto/update-ticket.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a ticket.\nThis class extends a partial type of CreateTicketDto, omitting the 'userId' and 'eventId' properties.\nIt allows for partial updates to a ticket's information.\nSee CreateTicketDto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateTicketDto, ['userId', 'eventId'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateTicketDto } from './create-ticket.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a ticket.\n *\n * This class extends a partial type of CreateTicketDto, omitting the 'userId' and 'eventId' properties.\n * It allows for partial updates to a ticket's information.\n *\n * @extends PartialType\n * @see CreateTicketDto\n */\nexport class UpdateTicketDto extends PartialType(\n  OmitType(CreateTicketDto, ['userId', 'eventId'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for updating a user.\nThis class extends a partial type of CreateUserDto, omitting the 'birthDate' and 'role' properties.\nIt allows for partial updates to a user's information.\nSee CreateUserDto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, ['birthDate', 'role'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType, OmitType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * Data Transfer Object (DTO) for updating a user.\n *\n * This class extends a partial type of CreateUserDto, omitting the 'birthDate' and 'role' properties.\n * It allows for partial updates to a user's information.\n *\n * @extends PartialType\n * @see CreateUserDto\n */\nexport class UpdateUserDto extends PartialType(\n  OmitType(CreateUserDto, ['birthDate', 'role'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                UsersController handles all user-related HTTP requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object containing user creation data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    \nThe page number to retrieve, defaults to 1.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves a single user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user with the specified ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Updates a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object containing user update data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated user.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Public } from '@modules/auth/decorators/public.decorator';\n\n/**\n * UsersController handles all user-related HTTP requests.\n */\n@Controller('users')\nexport class UsersController {\n  /**\n   * Creates an instance of UsersController.\n   * @param usersService - The service used to manage users.\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - Data Transfer Object containing user creation data.\n   * @returns The created user.\n   */\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Retrieves a paginated list of users.\n   * @param page - The page number to retrieve, defaults to 1.\n   * @returns A list of users.\n   */\n  @Get()\n  findAll(@Query('page') page: number = 1) {\n    return this.usersService.findAll(page);\n  }\n\n  /**\n   * Retrieves a single user by ID.\n   * @param id - The ID of the user to retrieve.\n   * @returns The user with the specified ID.\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  /**\n   * Updates a user by ID.\n   * @param id - The ID of the user to update.\n   * @param updateUserDto - Data Transfer Object containing user update data.\n   * @returns The updated user.\n   */\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  /**\n   * Deletes a user by ID.\n   * @param id - The ID of the user to delete.\n   * @returns A confirmation message.\n   */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaService } from '@database/prisma/prisma.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, PrismaService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling user-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of UsersService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Prisma service used for database operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing user creation details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A message indicating the user was created successfully.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the list of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:237\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by their email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing the user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:218\n                        \n                    \n\n\n            \n                \n                        Hashes a password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password to hash.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The hashed password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Deletes a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A message indicating the user was deleted successfully.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Updates a user's details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to update.\n\n\n                                            \n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing user update details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A message indicating the user was updated successfully.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { PrismaService } from '@database/prisma/prisma.service';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Service responsible for handling user-related operations.\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs a new instance of UsersService.\n   * @param prismaService - The Prisma service used for database operations.\n   */\n  constructor(private readonly prismaService: PrismaService) {}\n\n  /**\n   * Creates a new user.\n   * @param createUserDto - The data transfer object containing user creation details.\n   * @returns A message indicating the user was created successfully.\n   * @throws ConflictException if a user with the specified email already exists.\n   * @throws InternalServerErrorException if an error occurs during the operation.\n   */\n  async create(createUserDto: CreateUserDto) {\n    try {\n      const user = await this.prismaService.user.findUnique({\n        where: { email: createUserDto.email },\n      });\n\n      if (user) {\n        throw new ConflictException(\n          'User with the specified email already exists',\n          'User already exists',\n        );\n      }\n\n      const hashedPassword: string = await this.hashPassword(\n        createUserDto.password,\n      );\n      createUserDto.password = hashedPassword;\n\n      await this.prismaService.user.create({\n        data: {\n          ...createUserDto,\n          birthDate: new Date(createUserDto.birthDate),\n        },\n      });\n\n      return { message: 'User created successfully', status: 201 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Retrieves a paginated list of users.\n   * @param page - The page number to retrieve.\n   * @returns An object containing the list of users.\n   * @throws InternalServerErrorException if an error occurs during the operation.\n   */\n  async findAll(page: number) {\n    try {\n      const pageSize = 25;\n      const users = await this.prismaService.user.findMany({\n        take: page === 0 ? undefined : pageSize,\n        skip: page > 0 ? (page - 1) * pageSize : 0,\n        include: {\n          _count: {\n            select: {\n              tickets: true,\n            },\n          },\n          tickets: true,\n        },\n      });\n\n      return { users };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Retrieves a user by their ID.\n   * @param id - The ID of the user to retrieve.\n   * @returns An object containing the user details.\n   * @throws NotFoundException if the user with the specified ID is not found.\n   * @throws InternalServerErrorException if an error occurs during the operation.\n   */\n  async findOne(id: string) {\n    try {\n      const user = await this.prismaService.user.findUnique({\n        where: { id },\n        include: {\n          _count: {\n            select: {\n              tickets: true,\n            },\n          },\n          tickets: true,\n        },\n      });\n\n      if (!user) {\n        throw new NotFoundException(\n          'User with the specified ID was not found',\n          'User not found',\n        );\n      }\n\n      return { user };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Updates a user's details.\n   * @param id - The ID of the user to update.\n   * @param updateUserDto - The data transfer object containing user update details.\n   * @returns A message indicating the user was updated successfully.\n   * @throws NotFoundException if the user with the specified ID is not found.\n   * @throws UnauthorizedException if the provided password is invalid.\n   * @throws InternalServerErrorException if an error occurs during the operation.\n   */\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      if (!Object.keys(updateUserDto).length) {\n        return { message: 'No data to update', status: 200 };\n      }\n\n      const user = await this.prismaService.user.findUnique({\n        where: { id },\n      });\n\n      if (!user) {\n        throw new NotFoundException(\n          'User with the specified ID was not found',\n          'User not found',\n        );\n      }\n\n      const isValidPassword = await bcrypt.compare(\n        updateUserDto.password,\n        user.password,\n      );\n\n      if (!isValidPassword) {\n        throw new UnauthorizedException(\n          'Invalid password provided.',\n          'Unauthorized',\n        );\n      }\n\n      if (updateUserDto.password) {\n        const hashedPassword: string = await this.hashPassword(\n          updateUserDto.password,\n        );\n        updateUserDto.password = hashedPassword;\n      }\n\n      await this.prismaService.user.update({\n        where: { id },\n        data: {\n          ...updateUserDto,\n        },\n      });\n\n      return { message: 'User updated successfully', status: 200 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Deletes a user by their ID.\n   * @param id - The ID of the user to delete.\n   * @returns A message indicating the user was deleted successfully.\n   * @throws NotFoundException if the user with the specified ID is not found.\n   * @throws InternalServerErrorException if an error occurs during the operation.\n   */\n  async remove(id: string) {\n    try {\n      const user = await this.prismaService.user.findUnique({\n        where: { id },\n      });\n\n      if (!user) {\n        throw new NotFoundException(\n          'User with the specified ID was not found',\n          'User not found',\n        );\n      }\n\n      await this.prismaService.user.delete({\n        where: { id },\n      });\n\n      return { message: 'User deleted successfully', status: 204 };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Hashes a password.\n   * @param password - The password to hash.\n   * @returns The hashed password.\n   * @throws InternalServerErrorException if an error occurs during the operation.\n   */\n  async hashPassword(password: string): Promise {\n    try {\n      const hashedPassword: string = await bcrypt.hash(\n        password,\n        bcrypt.genSaltSync(10),\n      );\n      return hashedPassword;\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n\n  /**\n   * Retrieves a user by their email.\n   * @param email - The email of the user to retrieve.\n   * @returns An object containing the user details.\n   * @throws NotFoundException if the user with the specified email is not found.\n   * @throws InternalServerErrorException if an error occurs during the operation.\n   */\n  async findOneByEmail(email: string) {\n    try {\n      const user = await this.prismaService.user.findUnique({\n        where: { email },\n      });\n\n      if (!user) {\n        throw new NotFoundException(\n          'User with the specified email was not found',\n          'User not found',\n        );\n      }\n\n      return { user };\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/constants/jwtConstants.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/constants/jwtConstants.ts\n            \n            variable\n            jwtConstants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/modules/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/modules/events/dto/update-event.dto.ts\n            \n            class\n            UpdateEventDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/event-ticket-types/dto/create-event-ticket-type.dto.ts\n            \n            class\n            CreateEventTicketTypeDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/events/event-ticket-types/dto/update-event-ticket-type.dto.ts\n            \n            class\n            UpdateEventTicketTypeDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/events/event-ticket-types/event-ticket-types.controller.ts\n            \n            controller\n            EventTicketTypesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/events/event-ticket-types/event-ticket-types.service.ts\n            \n            injectable\n            EventTicketTypesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/tickets/dto/create-ticket.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/tickets/dto/update-ticket.dto.ts\n            \n            class\n            UpdateTicketDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/tickets/tickets.controller.ts\n            \n            controller\n            TicketsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        src/utils/generate-slug.ts\n            \n            function\n            generateSlug\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @prisma/client : ^6.3.1\n        \n            bcrypt : ^5.1.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateSlug   (src/.../generate-slug.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/generate-slug.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n            \n                \ngenerateSlug(eventName: string)\n                \n            \n\n\n\n\n            \n                \n                        Generates a URL-friendly slug from the given event name.\nThis function normalizes the input string by removing diacritical marks,\nconverting it to lowercase, trimming whitespace, and replacing spaces and\ninvalid characters with hyphens.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the event to generate a slug for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The generated slug.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ pnpm installCompile and run the project\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodRun tests\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ pnpm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventTicketTypesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_imports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_EventTicketTypesModule\n\n\n\ncluster_EventTicketTypesModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nEventTicketTypesModule\n\nEventTicketTypesModule\n\nEventsModule -->\n\nEventTicketTypesModule->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\nTicketsModule -->\n\nEventsService->TicketsModule\n\n\n\nEventTicketTypesModule -->\n\nEventsService->EventTicketTypesModule\n\n\n\n\n\nEventTicketTypesService\n\nEventTicketTypesService\n\nEventTicketTypesModule -->\n\nEventTicketTypesService->EventTicketTypesModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configService   (src/.../jwtConstants.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../jwtConstants.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/jwtConstants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: configService.get('JWT_SECRET'),\n}\n                    \n                \n\n            \n                \n                    Constants related to JWT (JSON Web Token) configuration.\n\n                \n            \n\n        \n    \n\n    src/modules/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    A constant key used to mark routes as public.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    A decorator that marks a route handler as public.\nThis decorator uses SetMetadata to attach a metadata key indicating that the route handler\ndoes not require authentication. Guards or other mechanisms can use this metadata to allow\npublic access to the route.\n\n                \n            \n\n        \n    \n\n    src/modules/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    A decorator that assigns roles to a route handler.\nThis decorator uses SetMetadata to attach the specified roles to the route handler's metadata.\nThe roles can then be used by guards or other mechanisms to enforce access control.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    A constant key used to store roles metadata.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
