generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  birthDate DateTime @map("birth_date")
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tickets Ticket[]

  @@map("users")
}

model Event {
  id                 String   @id @default(uuid())
  name               String
  slug               String?  @unique
  description        String?
  address            String
  latitude           Float
  longitude          Float
  date               DateTime
  phone              String?
  ticketCount        Int      @map("ticket_count")
  customTickets      Boolean  @default(false) @map("custom_tickets")
  ticketDefaultPrice Float?   @map("ticket_default_price")
  categoryId         String?  @map("category_id")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  category    Category?         @relation(fields: [categoryId], references: [id])
  tickets     Ticket[]
  ticketTypes EventTicketType[]

  @@map("events")
}

model EventTicketType {
  id          String @id @default(uuid())
  eventId     String @map("event_id")
  name        String @map("ticket_name")
  price       Float  @map("ticket_price")
  ticketCount Int    @map("ticket_count")

  events Event @relation(fields: [eventId], references: [id])

  @@map("event_ticket_types")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  events Event[]

  @@map("categories")
}

model Ticket {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  eventId    String     @map("event_id")
  ticketType TicketType @map("ticket_type")
  price      Float
  voucherId  String?    @map("voucher_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  deletedAt  DateTime?  @map("deleted_at")

  Event   Event    @relation(fields: [eventId], references: [id])
  User    User     @relation(fields: [userId], references: [id])
  Voucher Voucher? @relation(fields: [voucherId], references: [id])

  @@map("tickets")
}

model Voucher {
  id        String    @id @default(uuid())
  code      String    @unique
  discount  Float
  validFrom DateTime  @map("valid_from")
  validTo   DateTime  @map("valid_to")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Tickets Ticket[]

  @@map("vouchers")
}

// TODO: Add DiscountProof model for the user to prove that they are eligible for a discount

enum Role {
  USER  @map("user")
  ADMIN @map("admin")

  @@map("roles")
}

enum TicketType {
  FREE       @map("free")
  PAID       @map("paid")
  HALF_PRICE @map("half_price")

  @@map("ticket_types")
}
